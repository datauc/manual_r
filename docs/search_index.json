[["index.html", "Manual básico de R 1 Manejo de datos con R 1.1 Importación de datos 1.2 Codificación 1.3 Limpieza de datos 1.4 Recodificación de datos 1.5 Estructura de datos 1.6 Exportación de datos", " Manual básico de R Bastián Olea Herrera 1 Manejo de datos con R 1.1 Importación de datos Esta sección contiene instrucciones y ejemplos para importar datos a R, ya sea desde Excel, creando tus propias tablas de datos, importar desde PDF en R, u otros. 1.1.0.1 Importar archivos desde internet library(readxl) library(gdata) Archivo Excel: url_xls &lt;- &quot;http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/latitude.xls&quot; ## Import the .xls file with gdata: excel_gdata excel_gdata &lt;- read.xls(url_xls) ## Download file behind URL, name it local_latitude.xls download.file(url_xls, destfile = &quot;local_latitude.xls&quot;) ## Import the local .xls file with readxl: excel_readxl excel_readxl &lt;- read_excel(&quot;local_latitude.xls&quot;) Cualquier archivo: ## https URL to the wine RData file. url_rdata &lt;- &quot;https://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/wine.RData&quot; ## Download the wine file to your working directory download.file(url_rdata, destfile = &quot;wine_local.RData&quot;) ## Load the wine data into your workspace using load() load(&quot;wine_local.RData&quot;) ## Print out the summary of the wine data summary(wine) 1.1.0.2 Importar archivos csv read.csv(”myfile”, sep = &quot;;&quot;) Por defecto importa la primera fila como nombres de variables, y usa coma como separador. Para importar variables como caracteres y no factores: read.csv('csvsoundsystem.com/soundsystem.csv', stringsAsFactors = FALSE) Para importar datos donde los decimales sean comas y no puntos, y los separadores sean ;, usar read.csv2. Importar csv: read_csv bakeoff &lt;- read_csv(&quot;bakeoff.csv&quot;) Agregar skip=TRUE para saltarse la primera fila. Para definir datos missing, agregar argumento: na = c(\"\", \"NA\", \"UNKNOWN\", \"0\")' Importar archivos separados por tabulación: read_tsv Importar archivos con formato de tabla: read_delim potatoes&lt;-read_delim(&quot;potatoes.txt&quot;, delim=&quot;\\t&quot;, col_names=properties) Determinar colectores para importar los datos con los tipos y categorías correctos: fac &lt;- col_factor(levels = c(&quot;Beef&quot;, &quot;Meat&quot;, &quot;Poultry&quot;)) int &lt;- col_integer() ## Edit the col_types argument to import the data correctly: hotdogs_factor hotdogs_factor &lt;- read_tsv(&quot;hotdogs.txt&quot;, col_names = c(&quot;type&quot;, &quot;calories&quot;, &quot;sodium&quot;), col_types = list(fac, int, int)) 1.1.0.2.0.1 Importar csv con fread Importa tablas en formato data.table y data.frame. library(data.table) potatoes &lt;- fread(&quot;potatoes.csv&quot;) Argumentos para botar o seleccionar variables: fread(&quot;path/to/file.txt&quot;, drop = 2:4) ##botar variables 2 a 4 fread(&quot;path/to/file.txt&quot;, select = c(1, 5)) ##importar variables 1 y 5 fread(&quot;path/to/file.txt&quot;, drop = c(&quot;b&quot;, &quot;c&quot;, &quot;d&quot;)) fread(&quot;path/to/file.txt&quot;, select = c(&quot;a&quot;, &quot;e&quot;)) 1.1.0.2.0.2 Importar archivos separados por tabulación: hotdogs&lt;-read.delim(&quot;hotdogs.txt&quot;, header=T) Por defecto importa la primera fila como nombres de variables, y usa tabulación \\t como separador. header indica que al primera fila son los nombres de variables. Para importar datos donde los decimales sean comas y no puntos, y los separadores sean ;, usar read.csv2. 1.1.0.3 Importar datos desde Excel Usando readxl library(readxl) encuesta &lt;- readxl::read_excel(&quot;clase_25-6/Encuesta.xlsx&quot;) Importar una hoja específica: diccionario &lt;- readxl::read_excel(&quot;clase_25-6/Encuesta.xlsx&quot;, sheet=&quot;Diccionario&quot;) Nombres de hojas: excel_sheets(&quot;urbanpop.xlsx&quot;) Importar hojas de Excel: sheet= 1 Definir nombres de columnas manualmente: cols &lt;- c(&quot;country&quot;, paste0(&quot;year_&quot;, 1960:1966)) pop_b&lt;- read_excel(&quot;urbanpop_nonames.xlsx&quot;, col_names=cols) Saltarse casos: skip=4 Ver las hojas del documento: readxl::excel_sheets() Para importar todas las hojas en un archivo: archivo &lt;- &quot;clase_25-6/Encuesta.xlsx&quot; lista &lt;- lapply(readxl::excel_sheets(archivo), readxl::read_excel, path = archivo) lista[[1]] lista[[2]] 1.1.0.3.0.1 Importar y editar datos desde Excel con XLConnect  library(XLConnect) my_book&lt;-loadWorkbook(&quot;urbanpop.xlsx&quot;) ## List the sheets in my_book getSheets(my_book) ## Import the second sheet in my_book readWorksheet(my_book, sheet = 2) ## Import columns 3, 4, and 5 from second sheet in my_book: urbanpop_sel urbanpop_sel &lt;- readWorksheet(my_book, sheet = 2, startCol = 3, endCol = 5) ## Import first column from second sheet in my_book: countries countries &lt;- readWorksheet(my_book, sheet = 2, startCol = 1, endCol = 1) ## cbind() urbanpop_sel and countries together: selection selection &lt;- cbind(countries, urbanpop_sel) ## Build connection to urbanpop.xlsx my_book &lt;- loadWorkbook(&quot;urbanpop.xlsx&quot;) ## Add a worksheet to my_book, named &quot;data_summary&quot; createSheet(my_book, &quot;data_summary&quot;) ## Use getSheets() on my_book getSheets(my_book) ## Rename &quot;data_summary&quot; sheet to &quot;summary&quot; renameSheet(my_book, &quot;data_summary&quot;, &quot;summary&quot;) ## Print out sheets of my_book getSheets(my_book) ## Save workbook to &quot;renamed.xlsx&quot; saveWorkbook(my_book, &quot;renamed.xlsx&quot;) ## Remove the fourth sheet removeSheet(my_book, &quot;summary&quot;) ## Save workbook to &quot;clean.xlsx&quot; saveWorkbook(my_book, &quot;clean.xlsx&quot;) 1.1.0.4 Importar tabla pivotada de Excel Cuando las tablas no vienen en formato tidy, sino con varios headers e incluso headers al lado izquierdo, se usan los paquetes tidyxl y unpivotr Importar usando readxl alojo &lt;- readxl::read_xlsx(&quot;Datos/3 Establecimientos de alojamiento turístico 2017-2019.xlsx&quot;, sheet=2+1, skip=4) Luego se transforma para que cada celda de Excel corresponda a una fila en R: alojo2 &lt;- unpivotr::as_cells(alojo) Luego se aplica unpivotr::behead() para indicar dónde están los headers y en qué dirección: library(unpivotr) alojo3 &lt;- alojo2 %&gt;% behead(&quot;up-left&quot;, &quot;fecha&quot;) %&gt;% behead(&quot;up&quot;, &quot;nivel&quot;) %&gt;% behead(&quot;left&quot;, &quot;region&quot;) https://github.com/nacnudus/tidyxl https://github.com/nacnudus/unpivotr 1.1.0.4.0.1 Importar archivos de Stata foreign::read.dta() casen &lt;- readstata13::read.dta13(&quot;~/Casen/Casen 2017.dta&quot;) %&gt;% as_tibble() 1.1.0.4.0.2 Importar archivos de SPSS library(foreign) read.spss Reads SPSS data file read.spss(“myfile”) 1.1.0.4.0.3 Importar datos con readr Importa datos creando objetos de clase tbl_df, tbl y data.frame. Saltarse casos, y especificar la muestra: skip = 6, n_max = 5 Para definir los nombres de columnas: col_names=c(\"area\", \"temp\", \"size\", \"storage\", \"method\",\"texture\", \"flavor\", \"moistness\") Para definir manualmente los tipos de cada columna: col_types=\"cdil\" (character, double, integer, logical). potatoes_char &lt;- read_tsv(\"potatoes.txt\", col_types = \"iiiiiddd\", col_names = properties) El delimitador es delim=\"\" 1.1.0.5 Importar otros archivos con formato de tabla path &lt;- file.path(&quot;data&quot;, &quot;hotdogs.txt&quot;) ## directorio hotdogs &lt;- read.table(path, sep = &quot;/t&quot;, ##tabulación head=FALSE, ##sin nombres de columna col.names = c(&quot;type&quot;, &quot;calories&quot;, &quot;sodium&quot;)) header indica que al primera fila son los nombres de variables. En read.table, FALSE va por defecto. El separador se indica con sep. Para especificar los tipos de variables, agregar el argumento colClasses = c(\"factor\", \"NULL\", \"numeric\")) 1.1.0.6 Importar tablas desde PDF Usando Tabulizer: library(tabulizer) out &lt;- extract_tables(&quot;/Users/bastianolea/Documents/RStudio/Tarapacá\\ R/Servel/Participación\\ Municipales\\ 2016\\ comuna\\ género.pdf&quot;, output = &quot;data.frame&quot;) out2 &lt;- as_tibble(out, .name_repair = &quot;minimal&quot;) View(out2) library(tabulizer) ##Convertir PDF a data.frame ##Sirvió recoratar el PDF para que no tuviera logo en al página 1 mesas_2016 &lt;- extract_tables(&quot;~/Servel/Mesas Primarias 2016.pdf&quot;, pages = c(55:63), ##páginas 1 a 7 output = &quot;data.frame&quot;) mesas_2016b &lt;- bind_rows(mesas_2016, .id = NULL) ##%&gt;% ##Combinar lista de dataframes en un solo dataframe Instalación en Mac: https://gist.github.com/tomsing1/1da54d3f720ed96fbbb5a3f075bd2a56 Tutorial: https://datascienceplus.com/extracting-tables-from-pdfs-in-r-using-the-tabulizer-package/ 1.1.0.7 Combinar bases de datos Para combinar bases donde las columnas son las mismas (es decir, agregar casos) bind_rows(datos1, datos2) Par añadir columnas a una base bind_cols Unir a partir de una columna que coincida: datos1 %&gt;% ##Unir datos con mapa left_join(datos2) Combinar en base a variables compartidas dentro de dos datasets: ## Print the votes_processed dataset votes_processed ## Print the descriptions dataset descriptions ## Join them together based on the &quot;rcid&quot; and &quot;session&quot; columns votes_joined &lt;- votes_processed %&gt;% inner_join(descriptions, by = c(&quot;rcid&quot;, &quot;session&quot;)) Ejemplo: ilo_data &lt;- ilo_hourly_compensation %&gt;% inner_join(ilo_working_hours, by = c(&quot;country&quot;, &quot;year&quot;)) 1.1.0.8 Conectar a base de datos library(DBI) ## Connect to the MySQL database: con con &lt;- dbConnect(RMySQL::MySQL(), dbname = &quot;tweater&quot;, host = &quot;courses.csrrinzqubik.us-east-1.rds.amazonaws.com&quot;, port = 3306, user = &quot;student&quot;, password = &quot;datacamp&quot;) ## Build a vector of table names: tables tables &lt;- dbListTables(con) Importar una tabla en específico: ## Import the users table from tweater: users users&lt;- dbReadTable(con, &quot;users&quot;) Importar todas las tablas: ## Get table names table_names &lt;- dbListTables(con) table_names ## Import all tables tables &lt;- lapply(table_names, dbReadTable, conn = con) 1.1.0.9 Aplicar factor de expansión Cuando los datos provienen de fuentes estadísticas que requieren expansión: library(mefa) casen_w &lt;- rep(casen, times = casen$expc) O con tidyr: casen %&gt;% select(expr, sexo, pco1, oficio4) %&gt;% slice(1:100) %&gt;% tidyr::uncount(expr, .remove = F) %&gt;% print(n=Inf) 1.2 Codificación En esta sección encontrarás comandos para producir estructuras de dato de forma “manual”; es decir, imputando los datos caso por caso, o bien trabajando con ellos de forma personalizada. 1.2.0.1 Importar datos desde vectores Año = c(1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008) Nacimientos= c(4571,4782,4834,4701,4787,4467,4571,4583,4776,4761,5017,5287) Defunciones= c(889,946,946,916,991,1026,1040,1127,1092,1070,1156,1199) TasaNatalidad= c(20.8, 21.0, 20.4, 19.1, 19.0, 17.2, 17.2, 16.8, 17.1, 16.6, 17.1, 17.6) TasaMortalidad= c(4.0, 4.1, 4.0, 3.7, 3.9, 3.9, 3.9, 4.1, 3.9, 3.7, 3.9, 4.0) TasaFecundidad= c(2.61, 2.63, 2.58, 2.43, 2.42, 2.21, 2.22, 2.18, 2.23, 2.17, 2.23, 2.29) Tarapaca &lt;- data.frame(Año,Nacimientos,Defunciones,TasaFecundidad,TasaMortalidad,TasaNatalidad) 1.2.0.2 Escribir dataframe Crear un dataframe escribiendo las columnas sales &lt;- tibble::tribble( ~quarter, ~year, ~sales, &quot;Q1&quot;, 2000, 66013, &quot;Q2&quot;, NA, 69182, &quot;Q3&quot;, NA, 53175, &quot;Q4&quot;, NA, 21001, &quot;Q1&quot;, 2001, 46036, &quot;Q2&quot;, NA, 58842, &quot;Q3&quot;, NA, 44568, &quot;Q4&quot;, NA, 50197, &quot;Q1&quot;, 2002, 39113, &quot;Q2&quot;, NA, 41668, &quot;Q3&quot;, NA, 30144, &quot;Q4&quot;, NA, 52897, &quot;Q1&quot;, 2004, 32129, &quot;Q2&quot;, NA, 67686, &quot;Q3&quot;, NA, 31768, &quot;Q4&quot;, NA, 49094 ) 1.2.0.3 Crear vector y matriz de datos linkedin &lt;- c(16, 9, 13, 5, 2, 17, 14) facebook &lt;- c(17, 7, 5, 16, 8, 13, 14) views &lt;- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE) 1.2.0.4 Repetir un valor Repetir un 5 10 veces: rep(5, times=10) Repetir dos valores, uno cada x veces: rep(c(&quot;a&quot;, &quot;b&quot;), each = 100) 1.2.0.5 Crear sequencia de números Generar del 1 al 10 de uno en uno seq(from=1, to=10, by=1) Generar 10 valores desde 1 a 100 seq(from=1, to=100, length.out=10) 1.2.0.6 Crear data frame a partir de vectores data &lt;- data.frame(llamados_ventas, planes_contratados) 1.2.0.7 Crear listas my_list &lt;- list(my_vector, my_matrix, my_df) pop_list&lt;-list(pop_1, pop_2, pop_3) Listas con nombres: my_list &lt;- list(vec=my_vector, mat=my_matrix, df=my_df) shining_list &lt;- list(moviename = mov, actors=act, reviews=rev) Seleccionar desde listas: shining_list[[&quot;reviews&quot;]] shining_list$reviews ## Print out the vector representing the actors shining_list[[2]] ## Print the second element of the vector representing the actors shining_list[[2]][2] Expandir una lista: ## We forgot something; add the year to shining_list shining_list_full &lt;- c(shining_list, year = 1980) ## Have a look at shining_list_full str(shining_list_full) 1.2.0.8 Añadir casos manualmente datos %&gt;% add_row(x = 4, y = 0, Nombre = &quot;Mapache&quot;) 1.2.0.9 Crear vector de nombres Útil para selectores Shiny donde las alternativas son largas. El segundo argumento son los nombres. En el ejemplo, se crea un vector de números donde los nombres son el vector, cosa que en Shiny aparezcan las alternativas con el contenido del vector pero internamente se retorne un número. vector_nombrado &lt;- setNames(c(1:33), vector) 1.2.0.10 Añadir vector a una matriz all_wars_matrix &lt;- cbind(star_wars_matrix, worldwide_vector) 1.2.0.11 Contar hacia abajo Hacer una columna o variable que contenga números del 1 hasta el máximo de filas de la base: mutate(fila = 1:n()) e %&gt;% mutate(fila = 1:nrow(e)) 1.2.0.12 Usar output como texto de vector Retorna el output como el texto necesario para reproducir un vector dput() 1.3 Limpieza de datos Esta sección contiene instrucciones y ejemplos para limpiar datos en R, con operaciones que cambian los nombres de las variables, eliminan observaciones, tratan los datos perdidos de distintas maneras, etc. 1.3.0.1 Seleccionar variables El verbo select permite mantener, botar, y reordenar variables. Seleccionar variables que contengan un término: datos %&gt;% select(contains(&quot;término&quot;)) Filtrar datos para dejar o eliminar ciertas variables en la base de datos. select(datos, var1, var2, var3) select(datos, var1:var9) Se puede usar -var4 para ignorar una columna y -(var1:var5) para ignorar varias seguidas. Ejemplo: ratings %&gt;% select(series, channel, bbc, viewer_growth) Acá no es necesario poner la base de datos como primer argumento. Poner una variable antes que todas: datos %&gt;% select(var1, everything()) El argumento everything() pone el resto de las variables al final. 1.3.0.1.0.1 Des-seleccionar variables El signo menos sirve para indicar que se seleccionan todas menos lo especificado: ratings %&gt;% select(-ends_with(&quot;day&quot;)) Combinar comandos de selección: ratings %&gt;% select(channel, everything(), -ends_with(&quot;day&quot;)) La variable especificada al frente, luego todas las demás, menos las que terminan con “day”. 1.3.0.2 Reordenar columnas library(dplyr) weather5 &lt;- select(weather4, date, Events, CloudCover:WindDirDegrees) 1.3.0.3 Ordenar datos arrange(cran2, ip_id) ## ascendente arrange(cran2, desc(ip_id)) ## descendente Ordenar por una variable, y luego por la otra: arrange(datos, var1, var2) Ejemplos: arrange(top_counts, desc(count)) arrange(series, episode) %&gt;% bakers_mini %&gt;% arrange(age) %&gt;% glimpse() 1.3.0.3.0.1 Ordenar datos con base sort(datos$var1) order(datos$var1) ## Use order() to create positions positions &lt;- order(planets_df$diameter) ## Use positions to sort planets_df planets_df[positions, ] 1.3.0.4 Cambiar tipo de datos Convertir a carácter: students$Grades &lt;- as.character(students$Grades) Convertir a factor: mutate(var1 = as.factor(skill)) students$Fedu &lt;- as.factor(students$Fedu) weather6 &lt;- mutate_at(weather5, vars(CloudCover:WindDirDegrees), funs(as.numeric)) 1.3.0.5 Filtrar datos filter(datos, var1==&quot;Peq&quot;) filter(pack_sum, count&gt;679) Filtrar datos de acuerdo a ciertas condiciones de los casos. filter(datos, var2==&quot;categoría&quot;) filter(datos, var2==&quot;categoría&quot;, var3==&quot;mapache&quot;) filter(cran, r_version &lt;= &quot;3.0.2&quot;, country == &quot;IN&quot;) filter(cran, country==&quot;US&quot; | country == &quot;IN&quot;) filter(episode == 1 | episode == max(episode)) filter(star_baker==0 &amp; technical_winner == 0) 1.3.0.5.0.1 Con subset nombredefiltro&lt;-subset(datos,var1==&quot;categoria&quot;) Ejemplo: west&lt;-subset(pollution,region==&quot;west&quot;) ## Select planets with diameter &lt; 1 subset(planets_df, diameter &lt;1 ) 1.3.0.5.0.2 Con base Otra forma: nuevodataframe &lt;- datos[datos$var1==&quot;categoria&quot;,] nuevodataframe &lt;- datos[datos$var1==&quot;categoria&quot; &amp; datos$var2==&quot;categoria&quot;,] Filtrar datos específicos de una variable: common_cyl &lt;- filter(cars, ncyl %in% c(4, 6, 8)) ## Select the non-US revenue for first two movies non_us_some &lt;- all_wars_matrix[1:2,2] 1.3.0.6 Convertir datos a tibble Convertir una tabla de datos a el formato tibble, más moderno, ordenado, y usado en el tidyverse. datos_tibble &lt;- tibble::as_tibble(datos) 1.3.0.7 Cortar datos o eliminar filas Permite recortar un dataframe por las filas, para separar por ejemplo las primeras 200 filas: datos %&gt;% slice(1:200) Si se necesita eliminar algunas filas: datos %&gt;% slice(-1, -2, -3) 1.3.0.8 Eliminar más de una palabra a la vez datos %&gt;% mutate(ambito = stringr::str_remove_all(ambito, &quot;\\\\r|\\\\n&quot;)) 1.3.0.9 Reemplazar más de una palabra a la vez datos %&gt;% mutate(ambito = stringi::stri_replace_all_fixed(ambito, c(&quot;gnero&quot;, &quot;indicgena&quot;, &quot;plotica&quot;, &quot;oiriginarios&quot;), c(&quot;genero&quot;, &quot;indigena&quot;, &quot;politica&quot;, &quot;originarios&quot;), vectorize_all = FALSE)) 1.3.0.10 Eliminar caracteres especiales de un texto Para eliminar acentos y eñes de los textos: iconv(tolower(comuna), from = &#39;UTF-8&#39;, to = &#39;ASCII//TRANSLIT&#39;) 1.3.0.11 Filtrar columnas en base a condición datos %&gt;% select(which(nlevels(.) == 0)) 1.3.0.12 Limpiar números Elimina cualquier texto y deja sólo el número library(readr) parse_number(datos) Cuando un número viene en formato caracter pero también con símbolos, espacios o letras. También sirve para eliminar los caracteres y dejar sólo números: mutate(var1 = readr::parse_number(var1)) 1.3.0.13 Reemplazar datos perdidos Reemplazar casos missing o NA con 0 mutate(filtro_calculado = tidyr::replace_na(filtro_calculado, 0)) Convertir los missing en un valor: mutate(cantidad3 = ifelse(is.na(cantidad3), 0, cantidad3)) %&gt;% Para convertir un texto o símbolo en missing: mutate(variable = na_if(variable, &quot;símbolo&quot;)) na_if() to replace specified values with a NA. coalesce() to replace missing values with a specified value. tidyr::replace_na() to replace NA with a value 1.3.0.14 Convertir texto vacío a missing mutate(nombres = replace(nombres, !str_detect(nombres, &quot;&quot;), NA)) 1.3.0.15 Recodificar a missing Usando na_if() datos %&gt;% mutate(d11 = na_if(d11, &quot;No sabe&quot;)) Usando replace() datos %&gt;% mutate(d11 = replace(d11,&quot;No sabe&quot;, NA)) na_if() to replace specified values with a NA. coalesce() to replace missing values with a specified value. tidyrreplace_na() to replace NA with a value 1.3.0.16 Datos perdidos sum(is.na(datos)) Retorna cantidad de datos missing. También se logra con summary(datos) o con datos %&gt;% filter(is.na(variable)) which(is.na(datos)) Entrega la ubicación de los datos missing. ## Replace all empty strings in status with NA social_df$status[social_df$status == &quot;&quot;] &lt;- NA ## Print social_df to the console social_df ## Use complete.cases() to see which rows have no missing values complete.cases(social_df) ## Use na.omit() to remove all rows with any missing values social_df&lt;-na.omit(social_df) Definir valores missing al importar un archivo: ## Edit to add list of missing values bakeoff &lt;- read_csv(&quot;bakeoff.csv&quot;, skip = 1, na = c(&quot;&quot;, &quot;NA&quot;, &quot;UNKNOWN&quot;)) 1.3.0.17 Filtrar datos perdidos datos %&gt;% filter(!is.na(var1) &amp; !is.na(var2)) datos %&gt;% select(User_Score, Critic_Score) %&gt;% na.omit() %&gt;% 1.3.0.18 Filtrar datos perdidos en varias columnas Filtrar observaciones donde sean missing en varias columnas datos %&gt;% filter_at(vars(eval_act_pol_1_a:eval_act_pol_1_ad), any_vars(!is.na(.))) 1.3.0.19 Limpiar nombres de variables Elimina símbolos de las variables y las estandariza: library(janitor) ratings &lt;- messy_ratings %&gt;% clean_names(&quot;lower_camel&quot;) En el argumento de clean_names determina el tipo de nombre: &quot;snake&quot; produces snake_case &quot;lower_camel&quot; or &quot;small_camel&quot; produces lowerCamel &quot;upper_camel&quot; or &quot;big_camel&quot; produces UpperCamel &quot;screaming_snake&quot; or &quot;all_caps&quot; produces ALL_CAPS &quot;lower_upper&quot; produces lowerUPPER &quot;upper_lower&quot; produces UPPERlower Para convertir los nombres de las categorías de una variable factor: library(stringr) levels(eme2$nacionalidad) &lt;- str_to_title(eme2$nacionalidad) 1.3.0.20 Ordenar columnas alfabéticamente datos %&gt;% select(sort(names(.))) 1.3.0.21 Renombrar todas las columnas Reemplazar un texto en lo nombres de variables datos %&gt;% rename_all(funs(str_replace(., &quot;pregunta&quot;, &quot;p&quot;))) Renombrar columnas específicas rename_at(vars(starts_with(&quot;b&quot;)), funs(str_replace(., &quot;b&quot;, &quot;agua&quot;))) 1.3.0.22 Renombrar columnas con base nombres &lt;- gsub(&quot;Pregunta &quot;, &quot;p&quot;, names(encuesta)) 1.3.0.23 Renombrar variables o columnas rename(nombrenuevo = nombreviejo) %&gt;% Cambiar nombre de variables: view(datos) col(datos) names(datos)[1]&lt;-&quot;Campo&quot; names(datos)[2]&lt;-&quot;Ciudad&quot; El número 1 significa que es el primer elemento o primera columna. Entre comillas va el nombre. 1.3.0.24 Añadir sufijo a nombres de columnas rename_at(vars(c(30:53)),function(x) paste0(x,&quot;_x&quot;)) 1.3.0.25 Eliminar un término en el título de variables Seleccionar variables que contengan un término: datos %&gt;% select(contains(&quot;término&quot;)) %&gt;% gather(variable, frequency) %&gt;% mutate(variable = str_remove(variable, &quot;término&quot;)) Eliminar todas las palabras anteriores a un término, incluyendo al término: gathered_data %&gt;% mutate(response_var = str_remove(response_var, &#39;.*rude to &#39;)) Ejemplo: learning_platform_usefulness &lt;- multiple_choice_responses %&gt;% ## select columns with LearningPlatformUsefulness in title select(contains(&quot;LearningPlatformUsefulness&quot;)) %&gt;% ## change data from wide to long gather(learning_platform, usefulness) %&gt;% ## remove rows where usefulness is NA filter(!is.na(usefulness)) %&gt;% ## remove &quot;LearningPlatformUsefulness&quot; from each string in learning_platform mutate(learning_platform = str_remove(learning_platform, &quot;LearningPlatformUsefulness&quot;)) 1.3.0.26 Rellenar casos Cuando una columna sólo tiene valores cuando éstos cambian, y lo que se quiere es llenar de repeticiones entre cada cambio de los valores, cosa que 1 NA NA 2 NA NA 3 NA NA se vuelva 1 1 1 2 2 2 3 3 3 datos %&gt;% fill(columna) 1.3.0.27 Convertir fechas de Excel as.Date(42736, origin = &quot;1899-12-30&quot;) library(tibble) library(janitor) excel_numeric_to_date(as.numeric(as.character(42736)), date_system = &quot;modern&quot;) 1.3.0.28 Eliminar una categoría comics_filtered &lt;- comics %&gt;% filter(align != &quot;Reformed Criminals&quot;) %&gt;% droplevels() 1.3.0.29 Añadir identificadores o folio iris$Flower &lt;- 1:nrow(iris) 1.3.0.30 Remover texto de una categoría mutate(tipo = str_remove(tipo, &quot;texto a borrar&quot;)) 1.3.0.31 Borrar espacios antes y después stringr::desaparecidos$Región &lt;- str_trim(desaparecidos$Región) 1.3.0.32 Agregar caracteres antes o después stringr::str_pad(c(&quot;23485W&quot;, &quot;8823453Q&quot;, &quot;994Z&quot;), width=9, side=&quot;left&quot;, pad=&quot;0&quot;) 1.3.0.33 Detectar patrones en texto stringr::str_detect(students3$dob, &quot;1997&quot;) 1.3.0.34 Buscar y reemplazar valores stringr::str_replace(students3$sex, &quot;M&quot;, &quot;Male&quot;) weather3$day &lt;- stringr::str_replace(weather3$day, &quot;X&quot;, &quot;&quot;) También sirve para eliminar caracteres o patrones. Ejemplo: bakers &lt;- bakers %&gt;% mutate(position_reached = stringr::str_replace(position_reached, &quot;-&quot;, &quot; &quot;), position_reached = stringr::str_replace(position_reached, &quot;THIRD PLACE&quot;, &quot;RUNNER UP&quot;)) mutate(tipo = stringr::str_replace(tipo, &quot;mal escrito&quot;, &quot;bien escrito&quot;)) 1.3.0.35 Filtrar outliers Se crea una variable que especifique si son o no outliers, y luego se filtra la base según esa variable. ## Filter for Asia, add column indicating outliers gap2007 &lt;- gap2007 %&gt;% mutate(is_outlier = lifeExp &lt; 50) ## Remove outliers, create box plot of lifeExp gap2007 %&gt;% filter(!is_outlier) %&gt;% ggplot(aes(x = 1, y = lifeExp)) + geom_boxplot() 1.3.0.36 Convertir valores a mayúsculas o minúsculas: Convertir a minúsculas: tolower(&quot;AAAA&quot;) Convertir a mayúsculas: toupper(&quot;aaaa&quot;) states_upper &lt;- toupper(states) Ejemplo: bakers &lt;- bakers %&gt;% mutate(position_reached = str_to_upper(position_reached)) 1.3.0.37 Borrar prefijo de variables Borra el prefijo de los años, dejando solo caracteres entre ubicaciones 2 y 5 names(datos) &lt;- substring(names(datos),2,5) 1.3.0.38 Rellenar las fechas en una serie de tiempo ##inicio y final de la serie parcial min(conceptos$date) max(conceptos$date) ##crear serie completa ts &lt;- seq.POSIXt(as.POSIXct(min(conceptos$date), as.POSIXct(max(conceptos$date)), by=&quot;day&quot;) df &lt;- data.frame(date=ts) left_join(df, conceptos) ##unir la serie completa con la serie parcial 1.3.0.39 Ejemplos de Regex en R \".\" equivale a cualquier dato. \"ha.\" retorna TRUE para \"happy\" \".*\" cualquier carácter antes o después del texto . cualquier carácter $ final de palabra \\\\d es cualquier dígito único \\\\d+  es cualquier cantidad de dígitos \\\\w+ es cualquier palabra \\\\. es un punto Ejemplo: &quot;\\\\d\\\\d\\\\. \\\\w+ - &quot; …va a hacer match a “06. VI -” Dejar sólo el último caracter: ^(.*)(?=.$) Borrar todo hasta un caracter: ^[^\\\\)]*\\\\) ##hasta &quot;)&quot; Borrar todo dentro de paréntesis ([^()]*) Borrar todo desde “POB.” POB\\\\..*$ Borrar todo después de una palabra pero mantener la palabra: (?&lt;=caleta).* https://help.relativity.com/9.3/Content/Relativity/Regular_expressions/Regular_expression_metacharacters.htm 1.3.0.40 Fechas library(lubridate) La fecha se pone como argumento entre comillas, y se utiliza la función correspondiente: dmy(&quot;17 August 2010&quot;) mdy(&quot;August 17 2010&quot;) ymd(&quot;2010 August 17&quot;) Luego de definir las fechas con lubridate, se pueden realizar operaciones, por ejemplo, con mutate. interval: intervalo temporal entre dos fechas. duration: número de segundos en un intervalo. period: cambio de tiempo en un intervalo. Crear variables a partir de fechas: datos %&gt;% mutate(fecha= dmy(variableoriginal)) Calcular diferencias entre fechas: datos %&gt;% mutate(intervalo = interval(var1, var2) Luego se pueden convertir estos intervalos a otras unidades de tiempo: datos %&gt;% mutate(años_decimal = intervalo / years(1), años_enteros = intervalo %/% years(1)) En vez de years pueden usarse months, hours, etc. Obtener el mes de una fecha: mutate(month(last_date_appeared_us, label = TRUE)) Ejemplos: baker_time &lt;- baker_time %&gt;% mutate(time_on_air = interval(first_date_appeared_uk, last_date_appeared_uk), weeks_on_air = time_on_air / weeks(1), months_on_air = time_on_air %/% months(1)) 1.3.0.41 Agrupar datos Permite que los cálculos posteriores se apliquen a todas las categorías de una variable por separado. grupodedatos&lt;-group_by(datos, var1) Ejemplos: grupodedatos&lt;-group_by(datos, var1) summarize(grupodedatos, mean(var2)) Retorna el promedio de la variable dos para cada categoría de la variable 1. bakeoff %&gt;% filter(!is.na(us_season)) %&gt;% group_by(us_season) %&gt;% skim() Para desagrupar: ungroup() 1.3.0.42 Crear variables mutate(cran3, size_mb = size / 2^20) mutate(cran3, correct_size = size + 1000) Crear una nueva variable que indique el promedio de una variable: summarize(cran, avg_bytes = mean(size)) Esto se puede usar para obtener puntos promedios de una variable para una serie temporal: datos2 &lt;- datos %&gt;% group_by(year) %&gt;% summarize(var_promedio = mean(var1)) Y luego usar la nueva variable var_promedio como eje y de un gráfico. Este código crea nuevas variables a partir de operaciones realizadas sobre un conjunto de datos agrupados (con group_by): pack_sum &lt;- summarize(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinct(country), avg_bytes = mean(size)) ## The &#39;count&#39; column, created with n(), contains the total number of rows (i.e. downloads) for each package. The &#39;unique&#39; column, created with n_distinct(ip_id), gives the total number of unique downloads for each package, as measured by the number of distinct ip_id&#39;s. The &#39;countries&#39; column, created with n_distinct(country), provides the number of countries in which each package was downloaded. And finally, the &#39;avg_bytes&#39; column, created with mean(size), contains the mean download size (in bytes) for each package. Crear variable para todo el data frame: mutate(datos, var9=&quot;si&quot;) 1.3.0.43 Crear variable categórica Variable nominal: ## Sex vector sex_vector &lt;- c(&quot;Male&quot;, &quot;Female&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Male&quot;) ## Convert sex_vector to a factor factor_sex_vector &lt;- factor(sex_vector) ## Print out factor_sex_vector factor_sex_vector Variable ordinal: temperature_vector &lt;- c(&quot;High&quot;, &quot;Low&quot;, &quot;High&quot;,&quot;Low&quot;, &quot;Medium&quot;) factor_temperature_vector &lt;- factor(temperature_vector, order = TRUE, levels = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;)) factor_temperature_vector ## Create speed_vector speed_vector &lt;- c(&quot;medium&quot;, &quot;slow&quot;, &quot;slow&quot;, &quot;medium&quot;, &quot;fast&quot;) ## Convert speed_vector to ordered factor vector factor_speed_vector &lt;- factor(speed_vector, ordered=TRUE, levels=c(&quot;slow&quot;, &quot;medium&quot;, &quot;fast&quot;)) Cambiar nombre de niveles: ## Specify the levels of factor_survey_vector levels(factor_survey_vector) &lt;- c(&quot;Female&quot;,&quot;Male&quot;) Desagregar variable categórica: ## Male male &lt;- factor_survey_vector[1] ## Female female &lt;- factor_survey_vector[2] 1.4 Recodificación de datos Esta sección cubre instrucciones y ejemplos sobre recodificación de datos; es decir, operaciones que alteran el contenido de las variables o crean nuevas variables en base a condiciones o instrucciones. 1.4.0.1 Recodificar variables Recodificar variables: gapminder %&gt;% mutate(gdp = gdpPercap*pop) El primer argumento de mutate es el nombre de la nueva variable. datos2 &lt;- datos %&gt;% mutate(categorianueva = recode(categoria, &quot;var_antigua&quot; = &quot;var_nueva&quot;, &quot;missing&quot; = NA_character_)) Si la variable missing es numérica, NA_integer_ Para recodificar todos los demás valores en una sola variable, usar .default: mutate(tech_win = recode(technical, `1` = 1, .default = 0)) email %&gt;% mutate(has_image = recode(image, `0` = FALSE, .default = TRUE)) Si la variable a crear es un factor (por ejemplo, dummy), usar recode_factor en vez de recode. mutate(episode = recode(episode, `1` = &quot;first&quot;, .default = &quot;last&quot;)) Ejemplos: ratings &lt;- ratings %&gt;% mutate(bbc = recode_factor(channel, &quot;Channel 4&quot; = 0, .default = 1)) mutate(bump = (last - first) / first) 1.4.0.2 Crear una variable a partir de operaciones mutate(cran3, size_mb = size / 2^20) mutate(cran3, correct_size = size + 1000) summarize(cran, avg_bytes = mean(size)) datos %&gt;% mutate(variable = recode( student, `0` ) NA_character_, Con .default cualquier valor que no es 0 es recodificado por esta variable. Este código crea nuevas variables a partir de operaciones realizadas sobre un conjunto de datos agrupados (con group_by): pack_sum &lt;- summarize(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinct(country), avg_bytes = mean(size)) 1.4.0.3 Recodificar con base library(car) datos$nuevavariable&lt;-recode(datos$variableoriginal,&quot; 25:34.9=&#39;Pequeño&#39;; 35:54.9=&#39;Mediano&#39;; 55:65=&#39;Grande&#39;&quot;,as.factor=TRUE) Se rectifica en “datos” la variable titulada nuevavariable, basada en variableoriginal, y luego se especifican sus categorías. datos$nuevavariable&lt;-recode(datos$variableoriginal, &quot; &#39;hombre&#39;=0; &#39;mujer&#39;=1, as.integer=TRUE) Cortar el rango de los datos de una variable: adult &lt;- adult[adult$SRAGE_P &lt;= 84, ] 1.4.0.4 Crear variable desde condicional datos %&gt;% mutate(has_image = image &gt; 0) datos %&gt;% mutate(zero = variable == 0) Revisar niveles: levels(datos$variable) Convertir los niveles a factor: datos$variable &lt;- factor(datos$variable, levels=c(&quot;TRUE&quot;, &quot;FALSE&quot;)) 1.4.0.5 Recodificación según condiciones Funciona como un if true, then. 1.4.0.5.0.1 Condicional simple datos %&gt;% mutate(gen = if_else( between(birth_year, 1981, 1996), &quot;millenial&quot;, &quot;not_millenial&quot;)) La segunda categoría es para los casos que no cumplen la condición. mutate(Valor = ifelse(Delito==&quot;Otras causas&quot;, Valor/4, Valor)) %&gt;% ##Si el delito es &quot;otros&quot;, dividir por la cantidad de categorías colapsadas por fct_lump (22-n) para sacar el promedio mutate(pobreza2 = case_when(pobreza == &quot;Pobres extremos&quot; ~ &quot;Condición de pobreza&quot;, pobreza == &quot;Pobres no extremos&quot; ~ &quot;Condición de pobreza&quot;, pobreza == &quot;No pobres&quot; ~ &quot;Fuera de condición de pobreza&quot;)) 1.4.0.5.0.2 Múltiples condiciones datos %&gt;% mutate(gen = case_when( between(birth_year, 1965, 1980) ~ &quot;gen_x&quot;, between(birth_year, 1981, 1996) ~ &quot;millenial&quot;)) case_when(x %% 15 ==0 ~ &quot;fizz buzz&quot;, x %% 3 == 0 ~ &quot;fizz&quot;, x %% 5 == 0 ~ &quot;buzz&quot;, TRUE ~as.character(x) ) Agregar TRUE ~ \"asdas\" para crear una variable para los casos que no cumplen. De lo contrario, serán missing. Ejemplos: bakers_skill &lt;- bakers %&gt;% mutate(skill = case_when( star_baker &gt; technical_winner ~ &quot;super_star&quot;, star_baker &lt; technical_winner ~ &quot;high_tech&quot;, TRUE ~ &quot;well_rounded&quot; )) bakers_skill &lt;- bakers %&gt;% mutate(skill = case_when( star_baker &gt; technical_winner ~ &quot;super_star&quot;, star_baker &lt; technical_winner ~ &quot;high_tech&quot;, star_baker == 0 &amp; technical_winner == 0 ~ NA_character_, star_baker == technical_winner ~ &quot;well_rounded&quot; )) Ojo que para recodificar a missing, NA_character_ va sin comillas. 1.4.0.6 Convertir caracter a factor is.character(datos$variable) datos %&gt;% mutate_if(is.character, as.factor) 1.4.0.7 Etiquetar variables Utilizando base Etiqueta &lt;- c(&quot;Año&quot;,&quot;Nacimientos&quot;,&quot;Defunciones&quot;,&quot;Tasa de fecundidad&quot;,&quot;Tasa de mortalidad&quot;,&quot;Tasa de natalidad&quot;) library(sjlabelled) Datos &lt;- set_label(Datos, label = Etiqueta) adult$RBMI &lt;- factor(adult$RBMI, labels = c(&quot;Under-weight&quot;, &quot;Normal-weight&quot;, &quot;Over-weight&quot;, &quot;Obese&quot;)) 1.4.0.8 Manipulación de objetos con base Buscar el atributo en cierto objeto, reportando las filas donde se puede encontrar grep(atributo, objeto) posicion_valpo &lt;- grep(&quot;Valparaíso&quot;, encuesta$`Pregunta 3`) Reemplazar un valor inicial por uno final en cierto objeto. gsub(inicial, final, objeto) df$region &lt;- gsub(&quot;Región&quot;, &quot;R.&quot;, encuesta$`Pregunta 3`) Substraer de un objeto un carácter entre la posiciones inicial y final. substr(objeto, inicial, final) Permite unir uno o más objetos, en formato carácter. paste(objeto1,..., sep=“ ”) 1.4.0.9 Crear variable de interacción Crea una nueva variable que tiene por categorías a las combinaciones de todos los factores de dos variables. mutate(interacción = fct_cross(var1, var2, sep = &quot; + &quot;)) 1.4.0.10 Recodificar meses a texto Para pasar desde el número del mes a el mes con nombre: data %&gt;% mutate(Month = lubridate::month(Month, label = T, abbr= F, locale = &quot;es_ES&quot;)) 1.4.0.11 Calcular promedio móvil Rolling average, media móvil mutate(hits_rm = zoo::rollmean(hits, k = 7, fill = 0, align=&quot;left&quot;)) %&gt;% Donde k representa las filas para atrás que va a promediar 1.4.0.12 Aplicar mutate a varias columnas datos %&gt;% mutate(across(c(col1, col2), ~ round(.x*100, 1))) Otros ejemplos: mutate(across(g2_1:g2_6, as.numeric)) %&gt;% ##convertir a numéricos mutate(across(g2_1:g2_6, ~replace(.x, is.na(.x), 0))) %&gt;% ##poner ceros en vez de NA cep_r %&gt;% mutate(across(c(percepcion_2, percepcion_3), ~forcats::fct_relevel(.x, &quot;No sabe + No contesta&quot;, after=0))) %&gt;% count(percepcion_2) O también: mutate_at(vars(4:length(notas)), list(as.character)) 1.4.0.13 Convertir a logaritmos Convertir variable a logaritmo: gap2007 &lt;- gap2007 %&gt;% mutate(log_pop = log(pop)) 1.4.0.14 Crear categoría “otros” Agrupar automáticamente los factores menos comunes en una categoría “Otras”: datos %&gt;% mutate(variable = fct_lump(variable, prop = .08, other_level = &quot;Otras&quot;)) Las variables que sean menores al 8% se agrupan en “otras”. Mantener sólo las de mayor frecuencia: datos %&gt;% mutate(variable = fct_lump(variable, n = 3, other_level = &quot;Otras&quot;)) El n especifica la cantidad de variables superiores que se mantienen. Para nombrar categorías como “otros”, se seleccionan las que se desean mantener: datos %&gt;% mutate(variable = fct_other(variable, keep = c(&quot;antigua1&quot;, &quot;antigua2&quot;), other_level = &quot;Otras&quot;)) El resto de las variables no elegidas se vuelven “otras”. El argumento other_level = \"other method\" determina el nombre de la categoría “otros”. Seleccionar las que se desean transformar en “otros”: datos %&gt;% mutate(variable = fct_other(variable, drop = c(&quot;antigua1&quot;, &quot;antigua2&quot;))) De este modo, las variables especificadas pasan a formar parte de una variable “otras”. 1.4.0.15 Combinar categorías Combinar o agrupar múltiples categorías de una variable categórica en una cantidad menor. datos %&gt;% mutate(variable = fct_collapse(variable, nueva = c(&quot;antigua1&quot;, &quot;antigua2&quot;), nueva 2 = c(&quot;antigua3&quot;, &quot;antigua4&quot;))) 1.4.0.16 Dicotomizar la variable de respuesta: Hacer variable dummy: datos %&gt;% filter(!is.na(variable)) %&gt;% mutate(variable = if_else( variable %in% c(&quot;categoria&quot;, &quot;otra categoria&quot;), 1, 0)) 1.4.0.17 Recodificar categoría si coincide con texto Sirve, por ejemplo, para corregir errores ortográficos mutate(variable = stringr::str_replace(variable, &quot;texto incorrecto&quot;, &quot;Nuevo nombre de la categoría que contiene ese texto&quot;)) %&gt;% Para coincidir texto ignorando mayúsculas o minúsculas: mutate(variable = stringr::str_replace(variable, regex(&#39;texto&#39;, ignore_case = T), &quot;Nuevo nombre de la categoría que contiene ese texto&quot;)) %&gt;% 1.4.0.18 Reemplazar un valor por otro Sirve para cambiar algún valor que esté malo por otro, o recodificar un valor a missing (NA) mutate(Casos = replace(Casos, Fecha == ymd(&quot;2020-04-15&quot;), valornuevo)) Reemplazar para imputar un valor missing: mutate(Casos = replace(Casos, Casos == 0, NA)) Reemplazar un missing por otro valor: mutate(nacionalidad = replace(nacionalidad, is.na(nacionalidad), &quot;missing&quot;)) 1.4.0.19 Crear columna que sea la diferencia entre los valores de otra Para calcular brechas en columnas con categorías en formato long: mutate(diferencia = porcentaje[sexo == &quot;Mujer&quot;] - porcentaje) %&gt;% 1.4.0.20 Renombrar categorías mutate(variable = recode(variable, &quot;antigua&quot; = &quot;nueva&quot;)) 1.4.0.21 Añadir columna con porcentaje library(janitor) Agregar fila con suma de totales: adorn_totals(&quot;row&quot;) %&gt;% Agregar columna con suma de totales: adorn_totals(&quot;col&quot;) %&gt;% perc_useful_platform &lt;- learning_platform_usefulness %&gt;% ## change dataset to one row per learning_platform usefulness pair with number of entries for each count(learning_platform, usefulness) %&gt;% ## use add_count to create column with total number of answers for that learning_platform add_count(learning_platform, wt = n) %&gt;% ## create a new column, perc, that is the percentage of people giving that response for that learning_platform mutate(perc = n / nn) 1.4.0.22 Añadir columna con promedio usefulness_by_platform &lt;- learning_platform_usefulness %&gt;% ## If usefulness is &quot;Not Useful&quot;, make 0, else 1 mutate(usefulness = if_else(usefulness == &quot;Not Useful&quot;, 0, 1)) %&gt;% ## Group by learning platform group_by(learning_platform) %&gt;% ## Summarize the mean usefulness for each platform summarize(avg_usefulness = mean(usefulness)) 1.4.0.23 Calcular tasa mutate(Tasa = (Casos/Poblacion)*100000) %&gt;% 1.4.0.24 Dicotomizar variables Crear variable dicotómica: learning_platform_usefulness %&gt;% ## If usefulness is &quot;Not Useful&quot;, make 0, else 1 mutate(usefulness = if_else(usefulness == &quot;Not Useful&quot;, 0, 1)) ## Dichotomize the value variable to make a new variable, rude mutate(rude = if_else(value %in% c(&#39;No, not rude at all&#39;, &#39;No, not at all rude&#39;), 0, 1)) Ejemplo: mutate(extranjeros = case_when(nacionalidad == &quot;Chile&quot; ~ &quot;Chilena&quot;, TRUE ~ &quot;Extranjera&quot;)) %&gt;% 1.4.0.25 Cortar una variable continua a factores Para cortar la variable en intervalos discretos con el límite izquierdo abierto y el límite derecho cerrado (de 0 a 5, de 6 a 10): cut(datos$variable, c(0,5,10,15,20,25,30)) Cortar datos en una secuencia fija: cut(datos$variable, seq(0, 30, 5)) Indica que empieza en 0 y termina en 30 en intervalos de 5 en 5. 1.4.0.26 Reordenar factores mutate(ocupación_CIUO = forcats::fct_relevel(ocupación_CIUO, c(&quot;Estudiantes&quot;, &quot;Sin empleo&quot;, &quot;Sin información&quot;, &quot;Jubilados/as&quot;, &quot;Otras&quot;), after = Inf)) %&gt;% datos &lt;- datos %&gt;% mutate(variable = forcats::fct_relevel(variable, &quot;categoria1&quot;, &quot;categoria2&quot;, &quot;categoria3&quot;)) 1.4.0.26.0.1 Reordenar factor según otra variable Por ejemplo, reordenar una variable categórica a partir de los valores de una variable numérica: ggplot(datos, aes(x = forcats::fct_reorder(variable, referencia), y=... Según otra pero en descendiente: mutate(Genre = forcats::fct_reorder(Genre, n, .desc = TRUE)) 1.4.0.26.0.2 Invertir el orden de un factor iris$Species &lt;- factor(iris$Species, levels = rev(levels(iris$Species))) datos %&gt;% mutate(variable = forcats::fct_rev(variable)) 1.4.0.26.0.3 Especificar un orden a un facyor Obtener los niveles primero: levels(var) datos1 &lt;- datos %&gt;% mutate(variable1 = forcats::fct_relevel(variable1, &quot;Entirely internal&quot;, &quot;More internal than external&quot;, &quot;Approximately half internal&quot;, &quot;More external than internal&quot;, &quot;Entirely external&quot;)) eme2&lt;- eme2 %&gt;% mutate(tramo_ingresos = forcats::fct_relevel(tramo_ingresos, &quot;Entre 0 y $193.000&quot;,&quot;Entre $193.001 y $ 375.000&quot;,&quot;Entre $ 375.001 y $600.000&quot;,&quot;Entre $600.001 y $1.125.000&quot;,&quot;Entre $1.125.001 y $2.500.000&quot;,&quot;Entre $ 2.500.001 y $ 4.500.000&quot;,&quot;Entre $4.500.001 y $10.000.000&quot;,&quot;Entre $10.000.001 y $20.000.000&quot;,&quot;Entre $20.000.001 y $50.000.000&quot;,&quot;Entre $50.000.001 y $200.000.000&quot;)) Mover un nivel al final: multiple_choice_responses %&gt;% mutate(FormalEducation = forcats::fct_relevel(FormalEducation, &quot;I prefer not to answer&quot;, after = Inf)) %&gt;% Mover un nivel a una posición: multiple_choice_responses %&gt;% mutate(FormalEducation = forcats::fct_relevel(FormalEducation, &quot;Doctoral degree&quot;, after = 5)) 1.4.0.27 Crear columna que tenga los valores de una categoría de una columna en formato long Para repetir en una columna un dato específico a una categoría de agrupación (por ejemplo, el género en una variable “género”: mutate(mujer = porcentaje[sexo == &quot;Mujer&quot;]) %&gt;% Por ejemplo, para añadir barras de brecha: casen %&gt;% filter(region==&quot;Región de Tarapacá&quot;) %&gt;% rename(trabajan=o1) %&gt;% group_by(sexo, comuna, trabajan) %&gt;% summarise(cantidad=n()) %&gt;% mutate(porcentaje = cantidad/sum(cantidad)) %&gt;% group_by(comuna) %&gt;% mutate(diferencia = porcentaje[sexo == &quot;Mujer&quot;] - porcentaje) %&gt;% group_by(comuna, trabajan) %&gt;% mutate(mujer = porcentaje[sexo == &quot;Mujer&quot;]) %&gt;% mutate(hombre = porcentaje[sexo == &quot;Hombre&quot;]) %&gt;% filter(trabajan==&quot;Sí&quot;) %&gt;% ##filter(!is.na(trabajan)) %&gt;% ##graficar ggplot(aes(fct_reorder(str_wrap(comuna, 4), diferencia), porcentaje, fill=sexo)) + ##facet_wrap(~comuna, strip.position = &quot;bottom&quot;) + geom_col(position=&quot;dodge&quot;, width=0.8) + geom_text(aes(label = percent(porcentaje)), position = position_dodge2(width=0.8), hjust = 1.2, vjust=0.5, size=3.5, angle=90, color=&quot;white&quot;) + geom_linerange(aes(ymin = mujer, ymax = hombre, linetype=&quot;Brecha\\nde género&quot;), size=3, col=&quot;##DF1A57&quot;) 1.5 Estructura de datos Instrucciones y ejemplos para realizar transformaciones de la estructura de los datos. 1.5.0.1 Desordenar una base datos %&gt;% mutate(desorden = sample(1:nrow(datos))) %&gt;% arrange(desorden) 1.5.0.2 Convertir a tidy Los datos tidy cumplen lo siguiente: - Las observaciones son filas - Las variables son columnas - Existe una sola unidad observacional por tabla - La primera fila corresponde a nombres de variables, no valores Para convertis a tidy se usa gather: datos_untidy %&gt;% gather(key=&quot;columna_key&quot;, value=&quot;valores&quot;, columna_1:columna_3) datos_long &lt;- gather(datos, key, value, -year) data: data set- key: nueva columna que contiene folios o valores value: nueva columna que expresa el valor -…: nombre de las columnas a ignorar (que se va a mantener) na.rm=TRUE eliminar casos missing. Ejemplos: weather2 &lt;- gather(weather, day, value, X1:X31, na.rm = TRUE) tidy_ratings &lt;- ratings %&gt;% ## Gather and convert episode to factor gather(key = &quot;episode&quot;, value = &quot;viewers_7day&quot;, -series, factor_key = TRUE, na.rm = TRUE) ## Add column with unique ids (don&#39;t need to change) iris$Flower &lt;- 1:nrow(iris) ## Fill in the ___ to produce to the correct iris.wide dataset iris.wide &lt;- iris %&gt;% gather(key, value, -Species, -Flower) %&gt;% separate(key, c(&quot;Part&quot;, &quot;Measure&quot;), &quot;\\\\.&quot;) %&gt;% spread(&quot;Measure&quot;, value) Use gather() to move from fish.species to a tidy data frame, fish.tidy. This data frame should have three columns: Year (int), Species (factor) and Capture (int). gather() takes four arguments: the original data frame (fish.species), the name of the key column (Species), the name of the value column (Capture) and the name of the grouping variable, with a minus in front (-Year). They can all be specified as object names (i.e. no \" \"): fish.tidy &lt;- gather(fish.species, Species, Capture, -Year) 1.5.0.3 Tidyr 1.0 Los siguientes son equivalentes: gather(key=&quot;título&quot;, value=&quot;cantidad&quot;, ingresos_2016:gastos_2017) %&gt;% pivot_longer(ingresos_2016:gastos_2017, names_to = &quot;título&quot;, values_to = &quot;cantidad&quot;) Otro ejemplo: pivot_longer(cols = starts_with(&quot;total&quot;), names_to = &quot;tipo&quot;, values_to = &quot;cantidad&quot;) %&gt;% 1.5.0.4 Trasponer data frame Transponer, para que las fila sean columnas y las columnas filas library(reshape) matricula2 &lt;- t(matricula) indicadores %&gt;% gather(key = indicador, value = value, 2:ncol(indicadores)) %&gt;% spread_(key = names(indicadores)[1],value = &#39;value&#39;) 1.5.0.5 Unir dos columnas unite(datos, nuevacolumna, col1, col2) Agregar el argumento , sep = \", \" para determinar el separador para la nueva columna, que por defecto es guión bajo. El argumento remove = TRUE elimina las columnas originales luego de unirlas. Sirve para cuando una base de datos viene con una misma variable con cada categoría de respuestas en texto pero en columnas distintas. Así se unen las columnas en una sola. 1.5.0.6 Separar dos columnas Separar una columna que contiene dos variables en dos columnas. require(tidyr) separate(datos, variable_pegada, into=c(&quot;variable&quot;, &quot;pegada&quot;)) Separa automáticamente en símbolos, de lo contrario hay que especificarle. Se puede agregar un sep para determinar el separador. separate(census_long3, yr_month, c(&quot;year&quot;, &quot;month&quot;)) datos_untidy %&gt;% separate(col=spice, into=c(&quot;spice&quot;,&quot;order&quot;)) Agregar convert=TRUE… Se pueden botar el resto de las columnas: separate(episode, into = &quot;episode&quot;, extra = &quot;drop&quot; Separar celdas que contengan varios casos en filas distintas: separate_rows(MESAS, sep = &quot;-&quot;, convert = FALSE) 1.5.0.7 Convertir a wide spread(datos, var1, var2) En caso de que hayan dos valores de una variable que se correspondan con un solo valor de otra variable (por ejemplo, dos pruebas en un solo curso). Although it may not be immediately obvious, if we treat the values in the type column as variables and create a separate column for each of them, we can set things straight. To do this, we use the spread() function. Run the following code to see for yourself: spread(pets, type, num) The result shows the exact same information in a much clearer way! Notice that the spread() function took in three arguments. The first argument takes the name of your messy dataset (pets), the second argument takes the name of the column to spread into new columns (type), and the third argument takes the column that contains the value with which to fill in the newly spread out columns (num). 1.5.0.8 Anidar datos Cambia el data frame a una sola columna, produciendo una lista que contiene un data frame para cada caso. datos %&gt;% nest(-country) La variable indicada es la que va a quedar en el data frame, mientras que el resto se anidan. Obtener un dato de la lista: ## All countries are nested besides country nested &lt;- by_year_country %&gt;% nest(-country) ## Print the nested data for Brazil nested$data[[7]] Para desanidar: ## All countries are nested besides country nested &lt;- by_year_country %&gt;% nest(-country) ## Unnest the data column to return it to its original form nested %&gt;% unnest(data) 1.5.0.8.0.1 Aplicar una función a todos los elementos de una lista map() Se usa . para representar cada uno de los ítems en la columna data. 1.6 Exportación de datos Exportar datos 1.6.0.1 Exportar tablas library(htmlTable) tabla &lt;- comunas %&gt;% mutate(n_pueblos_originarios = pueblos_originarios * poblacion) %&gt;% mutate(n_pueblos_originarios = round(n_pueblos_originarios, digits= 0)) %&gt;% group_by(comuna) %&gt;% select(poblacion, pueblos_originarios, n_pueblos_originarios) htmlTable(tabla) Luego copiar y pegar en Pages y formatearlo 1.6.0.2 Exportar a Excel writexl::write_xl(datos, file = &quot;ruta/archivo.xlsx&quot;) 1.6.0.3 Exportar data frame save(objeto, file=&quot;objeto.Rdata&quot;) "],["visualización-de-datos-con-r-y-ggplot2.html", "2 Visualización de datos con R y ggplot2 2.1 Tipos de gráfico 2.2 Figuras y capas 2.3 Texto 2.4 Escalas 2.5 Colores 2.6 Leyendas 2.7 Temas y espaciado 2.8 Exportar gráficos", " 2 Visualización de datos con R y ggplot2 Se basa en siete componentes principales: - DATA FRAME which contains the data you’re trying to plot. - AESTHETIC MAPPINGS determine how data are mapped to color, size, etc. - The GEOMS (geometric objects) are what you see in the plot (points, lines, shapes) - FACETS are the panels used in conditional plots. - STATS are statistical transformations such as binning, quantiles, and smoothing which ggplot2 applies to the data. - SCALES show what coding an aesthetic map uses (for example, male = red, female = blue). - plots are depicted on a COORDINATE SYSTEM. When you use qplot these were taken care of for you. g+geom_point()+geom_smooth(method=&quot;lm&quot;)+facet_grid(.~drv) Donde g es un “objeto gráfico” de ggplot guardado como variable: g&lt;-ggplot(mpg,aes(displ,hwy)) El primer valor mpg es el conjunto de datos, y luego, dentro de la función “estética” aes, van como argumento las dos variables que queremos graficar. geom_point() es una capa que al estar vacía grafica un gráfico de dispersión. geom_smooth() con su argumento vacío grafica el intervalo de confianza. Pero al llevar lm como argumento, grafica una línea de regresión. facet_grid(.~drv) desagrega los datos en facetas según la variable indicada. Otros elementos, como títulos ggtitle y etiquetas ylab xlab se añaden como suma. Ejemplos: g+geom_point(aes(color=drv))+labs(title=&quot;Swirl Rules!&quot;)+labs(x=&quot;Displacement&quot;,y=&quot;Hwy Mileage&quot;) g+geom_point(aes(color=drv), size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method=&quot;lm&quot;,se=FALSE) alpha grafica los puntos del plot transparentes. linetype vuelve la línea en intermitente. se elimina el intervalo de confianza. g+geom_point(aes(color=drv))+theme_bw(base_family=&quot;Times&quot;) Graficar variable como factor (para que sólo aparezcan en el eje los valores presentes): factor(variable) 2.0.0.0.0.1 Gráfico con múltiples instancias según variable Se usa la capa facet: ggplot(iris.tidy, aes(x = Species, y = Value, col = Part)) + geom_jitter() + facet_grid(. ~ Measure) 2.1 Tipos de gráfico Ejemplos de los distintos tipos de gráficos que se pueden hacer en R 2.1.0.1 Barras geom_bar ggplot(Tarapaca, aes(y=Nacimientos, x=Año)) + geom_bar(stat=&quot;identity&quot;) ggplot(df2, aes(measurements, value)) + geom_line(aes(colour = samples, group = samples)) Barras una sobre otra: cyl.am &lt;- ggplot(mtcars, aes(x = factor(cyl), fill = factor(am))) ## Add geom (position = &quot;stack&quot; by default) cyl.am + geom_bar(position = &quot;stack&quot;) Barras encima de otras pero llenando el eje vertical: ## Fill - show proportion cyl.am + geom_bar(position = &quot;fill&quot;) Barras lado a lado: ## Dodging - principles of similarity and proximity cyl.am + geom_bar(position = &quot;dodge&quot;) Barras lado a lado pero superpuestas: ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = &quot;dodge&quot;) ## 2 - Define posn_d with position_dodge() posn_d &lt;- position_dodge(width=0.2) ## 3 - Change the position argument to posn_d ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = posn_d) ## 4 - Use posn_d as position and adjust alpha to 0.6 ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = posn_d, alpha=0.6) Para definir el color de las barras, hay que cambiar col y fill: m &lt;- ggplot(mtcars, aes(x = cyl,y = wt, col = am, fill = am)) De barras con porcentaje para variables categóricas o factores: ggplot(eme2, aes(x = sexo)) + geom_bar(aes(y = (..count..)/sum(..count..), fill=sexo)) + scale_y_continuous(labels=scales::percent) + geom_text(aes(y = ((..count..)/sum(..count..)), label = scales::percent((..count..)/sum(..count..))), stat = &quot;count&quot;, vjust = 4, color=&quot;white&quot;) 2.1.0.1.0.1 Barra “dinamita” (con marcas de error) ## Base layers m &lt;- ggplot(mtcars, aes(x = cyl, y = wt)) ## Draw dynamite plot m + stat_summary(fun.y = mean, geom = &quot;bar&quot;, fill = &quot;skyblue&quot;) + stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = &quot;errorbar&quot;, width = 0.1) ## Base layers m &lt;- ggplot(mtcars, aes(x = cyl, y = wt)) ## Set your dodge posn manually posn.d &lt;- position_dodge(0.9) ## Plot 3: Redraw dynamite plot m + stat_summary(fun.y = mean, geom = &quot;bar&quot;, position = posn.d) + stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = &quot;errorbar&quot;, width = 0.1, position = posn.d) Gráfico de barras con faceta: ggplot(email, aes(x= number)) + geom_bar() + facet_wrap(.~spam) 2.1.0.2 Dispersión Útil para agregar sobre boxplots. + geom_jitter(color=&quot;steelblue&quot;, alpha=0.3) + geom_boxplot(alpha=0) 2.1.0.3 Torta Representa la distribución de categorías dentro de un todo. Gráfico de torta: ## Create a stacked bar plot: wide.bar wide.bar &lt;- ggplot(mtcars, aes(x = 1, fill = cyl)) + geom_bar() ## Convert wide.bar to pie chart wide.bar + coord_polar(theta = &quot;y&quot;) Gráfico de anillo: ## Create stacked bar plot: thin.bar thin.bar &lt;- ggplot(mtcars, aes(x = 1, fill = cyl)) + geom_bar(width = 0.1) + scale_x_continuous(limits = c(0.5,1.5)) ## Convert thin.bar to &quot;ring&quot; type pie chart thin.bar + coord_polar(theta = &quot;y&quot;) Definir los colores: scale_fill_manual(values=c(&quot;##320D70&quot;, &quot;##DF1A58&quot;)) Torta de variable categórica o factores con porcentajes: eme_genero2_gg &lt;- eme2 %&gt;% ggplot(aes(x=1, fill=sexo)) + geom_bar(position=&quot;stack&quot;,width = 0.5, aes(y = (..count..)/sum(..count..))) + scale_y_continuous(labels=scales::percent) + scale_x_continuous(limits = c(0.5,1.3)) + scale_fill_manual(values=c(&quot;##320D70&quot;, &quot;##DF1A58&quot;)) + geom_text(aes(y = ((..count..)/sum(..count..)), label = scales::percent((..count..)/sum(..count..))), stat = &quot;count&quot;, vjust = -9, color=&quot;white&quot;) + theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), rect = element_blank(), panel.grid = element_blank(), legend.title = element_blank(), legend.direction = &quot;horizontal&quot;, legend.position = &quot;bottom&quot;) + labs(title=&quot;Microemprendedores según género&quot;) + coord_polar(theta = &quot;y&quot;) Ejemplo: eme_genero_gg &lt;- eme2 %&gt;% ggplot(aes(x = 1, sexo, fill = sexo)) + geom_col() + scale_fill_manual(values=c(&quot;##320D70&quot;, &quot;##DF1A58&quot;)) + coord_polar(theta = &quot;y&quot;) + theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), rect = element_blank(), panel.grid = element_blank(), legend.title = element_blank(), legend.direction = &quot;horizontal&quot;, legend.position = &quot;bottom&quot;) + labs(title=&quot;Microemprendedores según género&quot;) eme_genero_gg Ejemplo: extranjeros_verano &lt;- turismo %&gt;% filter(periodo==&quot;Verano&quot;) %&gt;% mutate(extranjeros = case_when(nacionalidad == &quot;Chile&quot; ~ &quot;Chilena&quot;, TRUE ~ &quot;Extranjera&quot;)) %&gt;% group_by(extranjeros) %&gt;% summarize(cantidad = n()) %&gt;% ggplot(aes(x=1, y=cantidad, fill=extranjeros)) + geom_col() + coord_polar(theta = &quot;y&quot;, start=0, direction = -1) + scale_fill_discrete(name = &quot;Nacionalidad&quot;) + theme(axis.text = element_blank(), axis.title = element_blank()) + ##geom_text(aes(x=1, y = cumsum(cantidad) - cantidad/3, label = percent(cantidad/sum(cantidad)))) + geom_text(aes(label = percent(cantidad/sum(cantidad), accuracy=1)), position = position_stack(vjust = 0.5)) + labs(subtitle=&quot;Verano&quot;) 2.1.0.4 Densidad geom_density El gráfico de densidad es una línea curva de la silueta del histograma: ggplot(common_cyl, aes(x = city_mpg, fill = as.factor(ncyl))) + geom_density(alpha = .3) La desviación estándar bw suaviza el histograma. ggplot(truck_speeding, aes(x = hour_of_day)) + ## switch to density with bin width of 1.5, keep fill geom_density(fill = &#39;steelblue&#39;, bw=1.5) + ## add a subtitle stating binwidth labs(title = &#39;Citations by hour&#39;, subtitle= &quot;Gaussian kernel SD= 1.5&quot;) Parámetros: - bw - the smoothing bandwidth to be used, see ?density for details - adjust - adjustment of the bandwidth, see density for details - kernel - kernel used for density estimation, defined as - “g” = gaussian - “r” = rectangular - “t” = triangular - “e” = epanechnikov - “b” = biweight - “c” = cosine - “o” = optcosine 2.1.0.5 Boxplot ggplot(aes(x = 1, y = city_mpg)) + geom_boxplot() Se puede poner 1 en el eje x para mostrar solo un boxplot. El ancho de cada caja puede depender de la cantidad de casos: geom_boxplot(varwidth=TRUE) 2.1.0.6 Curvas y modelos lineales Agregar líneas de regresión al gráfico geom_smooth Curva Loess: ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + geom_smooth() Cambiar Línea de regresión: ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + geom_smooth(method=&quot;lm&quot;, se=FALSE) ## línea de regresión Ejemplo: ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) + geom_point() + stat_smooth(method = &quot;lm&quot;, se = FALSE) + stat_smooth(method = &quot;lm&quot;, se = FALSE, aes(group=1)) myColors &lt;- c(brewer.pal(3, &quot;Dark2&quot;), &quot;black&quot;) ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) + geom_point() + stat_smooth(method = &quot;lm&quot;, se = FALSE, span = 0.7) + stat_smooth(method = &quot;loess&quot;, aes(group = 1, col=&quot;All&quot;), se = FALSE, span = 0.7) + scale_color_manual(&quot;Cylinders&quot;, values=myColors) 2.1.0.7 Barras redondeadas library(ggchicklet) ggplot(count(mtcars, cyl), aes(x = cyl, y = n)) + geom_chicklet(radius = grid::unit(15, &#39;mm&#39;), fill = &#39;skyblue&#39;) + theme_minimal() 2.1.0.8 Nubes de palabras https://medium.com/@rohitnair_94843/analysis-of-twitter-data-using-r-part-2-word-cloud-dd423af1b2c6 https://www.r-bloggers.com/awesome-twitter-word-clouds-in-r/ 2.1.0.9 Convertir a 3D https://www.rayshader.com 2.1.0.10 Estadísticas en gráficos Curva normal: + stat_function ## Plot 2: Mean and SD - the easy way wt.cyl.am + stat_summary(fun.data=mean_sdl, fun.args=list(mult=1), position=posn.d) ## Plot 3: Mean and 95% CI - the easy way wt.cyl.am + stat_summary(fun.data=mean_cl_normal, position=posn.d) ## Plot 4: Mean and SD - with T-tipped error bars - fill in ___ wt.cyl.am + stat_summary(geom = &quot;point&quot;, fun.y = mean, position = posn.d) + stat_summary(geom = &quot;errorbar&quot;, fun.data = mean_sdl, position = posn.d, fun.args = list(mult = 1), width = 0.1) 2.1.0.11 Crestas library(ggridges) p + geom_density_ridges() md_speeding %&gt;% mutate(day_of_week = factor(day_of_week, levels = c(&quot;Mon&quot;,&quot;Tues&quot;,&quot;Wed&quot;,&quot;Thu&quot;,&quot;Fri&quot;,&quot;Sat&quot;,&quot;Sun&quot;) )) %&gt;% ggplot(aes( x = percentage_over_limit, y = day_of_week)) + ## make ridgeline densities a bit see-through with alpha = 0.7 geom_density_ridges(bandwidth = 3.5, alpha=0.7) + ## set expand values to c(0,0) scale_x_continuous(limits = c(0,150), expand=c(0,0)) + labs(subtitle = &#39;Guassian kernel SD = 3.5&#39;) + ## remove y axis ticks theme(axis.ticks.y=element_blank()) 2.1.0.12 Enjambre Alternativa al boxplot. Agrega dispersión de forma inteligente, con los puntos lo más cercanos al eje. library(ggbeeswarm) p + geom_beeswarm() Muestra todos los puntos de datos y la forma de la distribución. Funciona mal con demasiados datos. Cambiar el tamaño de los puntos: geom_beeswarm(cex=0.5) + 2.1.0.13 Violín Alternativa al boxplot. Muestra la distirbución de forma simétrica. geom_violin() Funciona bien con muchos datos, pero no muestra cada dato individualmente. geom_violin(bw = 2.5) + 2.1.0.14 Líneas geom_line ggplot(economics, aes(x = date, y = unemploy/pop)) + geom_line() ggplot(fish.tidy, aes(x = Year, y = Capture, color=Species)) + geom_line() ggplot(ChickWeight, aes(x = Time, y = weight, col=Diet)) + geom_line(aes(group = Chick), alpha=0.3) + geom_smooth(lwd=2, se=FALSE) Seis mapas de líneas horizontalmente: ggplot(barley, aes(x=year, y=yield, col=variety, group=variety)) + geom_line() + facet_wrap( ~ site, nrow= 1) Planos de líneas de promedios con desviación estándar como barritas transparentes: ## Create overlapping ribbon plot from scratch ggplot(barley, aes(year, yield, col= site, group=site, fill=site)) + stat_summary(fun.y=mean, geom=&quot;line&quot;) + stat_summary(fun.data=mean_sdl, fun.args=list(mult=1), geom=&quot;ribbon&quot;, col=NA, alpha=0.1) 2.1.0.15 Histograma geom_histogram A mayor binwidth, más gruesas las líneas. bins es el número de barras. center hace que la barra central esté en un punto determinado. ggplot(mtcars, aes(x = mpg)) + geom_histogram(aes(y=..density..), binwidth=1, bins=40, fill=&quot;##377EB8&quot;) ggplot(adult, aes(SRAGE_P, fill=factor(RBMI))) + geom_histogram(binwidth=1) qplot(var1,data=datos,fill=var2) Con color qplot(var1,var2,data=datos,facets=.~var3) Tres histogramas horizontalmente, divididos por variable 3. qplot(var1,data=datos,facets=var2~.,binwidth=2) Tres histogramas, uno encima del otro. Polígono de frecuencias: ggplot(mtcars, aes(mpg, color=cyl)) + geom_freqpoly(binwidth=1) Alfombra de casos: + geom_rug 2.1.0.16 Dumbell ggplot(first_last, aes(x = series, y = viewers, color = episode)) + geom_point() + ## keep geom_line(aes(group = series)) + ## keep coord_flip() ## keep 2.1.0.17 Mapas de calor geom_tile ## Create color palette myColors &lt;- brewer.pal(9, &quot;Reds&quot;) ## Build the heat map from scratch ggplot(barley, aes(x = year, y = variety, fill = yield)) + geom_tile() + ## Geom layer facet_wrap( ~ site, ncol = 1) + ## Facet layer scale_fill_gradientn(colors = myColors) ## Adjust colors 2.1.0.18 Splom (scatterplot matrix) pairs(datos) library(PerformanceAnalytics) chart.Correlation(iris[1:4]) library(GGAlly) ggpairs(datos[1:9]) 2.1.0.19 Matriz de correlación 2.1.0.20 Coordenadas paralelas ggparcoord(datos, columns =1:4, groupColumn=5, scale=&quot;globalminmax&quot;, order=&quot;anyClass&quot;, alphaLines=0.4) 2.1.0.21 Mapas Mapoteca congreso nacional: https://www.bcn.cl/siit/mapas_vectoriales/index_html http://guillermoacuna.blogspot.com/2017/02/como-hacer-un-mapa-de-chile-en-r.html https://geocompr.robinlovelace.net/adv-map.html tm_fill() + tm_borders() https://eriqande.github.io/rep-res-web/lectures/making-maps-with-R.html 2.1.0.22 Mapa de densidad Mapa lineal de densidad, como un mapa topográfico: geom_density_2d() Mapa con degradado de calor: geom_density_2d(geom=&quot;tile&quot;, aes(fill=..density..), contour=FALSE) Mapa de círculos: geom_density_2d(geom=&quot;point&quot;, aes(fill=..density..), n=20, contour=FALSE) + scale_size(range=c(0,9)) Agregar línea de medianas: p+geom_vline(data=mu, aes(xintercept=grp.mean, color=sex), linetype=&quot;dashed&quot;) 2.1.0.23 Scatter Permiten explorar preguntas e hipótesis iniciales, sugerir estrategias para siguientes pasos, y resumir los datos gráficamente para destacar características generales. geom_point Requiere especificar x e y. ggplot(df, aes(x = wt, y = mpg)) + geom_point() Cambiar color y forma: b + geom_point(color = &quot;##00AFBB&quot;, size = 2, shape = 23) Cambiar forma de los puntos según otra variable: b + geom_point(aes(shape = cyl)) Cambiar forma y color de los puntos según otras variables: b + geom_point(aes(shape = cyl, color = cyl)) Para colores personalizados: + scale_color_manual(values = c(\"##00AFBB\", \"##E7B800\", \"##FC4E07\") Texto del eje x: rotar y mostrar todos los valores: + scale_x_continuous(&quot;Año&quot;, labels = as.character(Año), breaks = Año) Definir mínimos y máximos: + coord_cartesian(ylim = c(800, 5500)) ## especificar mínimos y máximos del eje y Añadir dispersión a los puntos: jitter can be 1) an argument in geom_point(position = &#39;jitter&#39;), 2) a geom itself, geom_jitter(), or 3) a position function, position_jitter(0.1) Ejemplo de scatter: ggplot(Vocab, aes(x=education, y=vocabulary)) + geom_jitter(alpha=0.2, shape=1) Ejemplo: gD&lt;- ggplot(Tarapaca, aes(x = Año, y = Defunciones)) gD+ geom_smooth(se=FALSE, alpha=10, size=0.5, color=&quot;##C19BDE&quot;) + ##línea de tendencia, falso para no mostrar intervalos geom_point(aes(size = TasaMortalidad), alpha = 0.7, color = &quot;##8A1CDD&quot;) + ##variable graficada como &quot;size&quot;, con color y transparencia scale_size(range = c(0.5, 10)) + ##rango del tamaño de círculos theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) + ##ángulo del texto del eje x scale_x_continuous(&quot;Año&quot;, labels = as.character(Año), breaks = Año) + ##etiquetas del eje x theme(panel.grid.major = element_line(Año, color = &quot;white&quot;), ## líneas del fondo panel.grid.minor = element_blank(), ## borrar líneas menores panel.background = element_rect(fill = &quot;##EDE6F2&quot;), ## color de fondo legend.key = element_rect(fill = &quot;##EDE6F2&quot;)) + ## color de fondo de leyenda labs(size=&quot;Tasa de mortalidad&quot;) + ##título del elemento &quot;size&quot; coord_cartesian(ylim = c(800, 5500)) ## especificar mínimos y máximos del eje y Ejemplo de scatter con dos variables: gX &lt;- ggplot(Tarapaca) gX + geom_point(aes(y=Nacimientos , x=Año, size=TasaNatalidad, colour=TasaFecundidad), alpha = 0.7, color = &quot;##DD4814&quot;) + geom_point(aes(y = Defunciones, x=Año, size=TasaMortalidad), alpha = 0.7, color = &quot;##8A1CDD&quot;) + ##geom_point(aes(y = , x=Año, size=Nacimientos), alpha = 0.7, color = &quot;##DD4814&quot;) scale_size(range = c(2, 15)) + ##rango del tamaño de círculos theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) + ##ángulo del texto del eje x scale_x_continuous(&quot;Año&quot;, labels = as.character(Año), breaks = Año) + ##etiquetas del eje x theme(panel.grid.major = element_line(Año, color = &quot;white&quot;), ## líneas del fondo panel.grid.minor = element_blank(), ## borrar líneas menores panel.background = element_rect(fill = &quot;##EDE6F2&quot;), ## color de fondo legend.key = element_rect(fill = &quot;##EDE6F2&quot;)) + ## color de fondo de leyenda labs(size=&quot;Tasa de mortalidad&quot;) ##título del elemento &quot;size&quot; Ejemplo de qplot: qplot(wt, mpg, data = mtcars) 2.1.0.24 Gráficos con iconos o logotipos Instalar iconos de símbolos como FontAwesome o IonIcons Luego graficar con geom_text usando el código del glifo a utilizar: geom_text(label=&quot;\\uF236&quot;, size = 14, family = &#39;FontAwesome&#39;, col=&quot;##1C2366&quot;) + 2.1.0.25 Waffle disease_counts &lt;- who_disease %&gt;% group_by(disease) %&gt;% summarise(total_cases = sum(cases)) %&gt;% mutate(percent = round(total_cases/sum(total_cases)*100)) ## Create an array of rounded percentages for diseases. case_counts &lt;- disease_counts$percent ## Name the percentage array names(case_counts) &lt;- disease_counts$disease ## Pass case_counts vector to the waffle function to plot waffle(case_counts) parts &lt;- c(80, 30, 20, 10) chart &lt;- waffle(parts, rows=8) ## print(chart) ## library(extrafont) ## waffle(parts, rows=8, use_glyph=&quot;shield&quot;) parts &lt;- c(One=80, Two=30, Three=20, Four=10) chart &lt;- waffle(parts, rows=8) ## print(chart) library(waffle) parts &lt;- c(&#39;TRUE&#39; = 3, &#39;FALSE&#39; = 77) p &lt;- waffle(parts, rows = 8, colors = c(&quot;black&quot;, &quot;grey70&quot;)) p Ejemplo: originarios_total &lt;- read_excel(&quot;/Users/rndzvs/RStudio/Tarapacá\\ R/Indígenas.xlsx&quot;, sheet=&quot;Región&quot;) originarios_total originarios_total_tidy &lt;- originarios_total %&gt;% gather(`Pueblo originario`, Porcentaje, Aimara:`Sin pertenencia`) %&gt;% mutate_if(is.character, as.factor) originarios_total_tidy ## Explorar porcentajes de cada pueblo en total originarios_total_tidy %&gt;% group_by(`Pueblo originario`) %&gt;% ##filter(`Pueblo originario`==&quot;Aimara&quot;) %&gt;% summarize(percent(Porcentaje/10)) originarios_desagregado_tidy pueblos_originarios_vector &lt;- c(Aimara=29.1, Diaguita=1.44, Mapuche=2.18, Quechua=3.24, `Otra etnia`=3.24, `Sin pertenencia`=62.5) pueblos_originarios_waffle &lt;- waffle(pueblos_originarios_vector, rows=9, size=2) pueblos_originarios_waffle_gg &lt;- pueblos_originarios_waffle + labs(title=&quot;Pertenencia a pueblos originarios&quot;, subtitle=&quot;Cada cuadro representa a 1 de cada 100 tarapaqueños&quot;) + scale_fill_manual(values=c(&quot;##1A9D75&quot;, ##aymara &quot;##69A500&quot;, ##diaguita &quot;##7370B5&quot;, ##mapuche &quot;##DB6200&quot;, ##quechua &quot;##E8348B&quot;, ##otros &quot;##AFAFAF&quot;, ##sin &quot;##FFFFFF&quot; ##fondo )) + tema_comparaciones2 + theme(legend.title = element_blank(), legend.position = &quot;bottom&quot;) pueblos_originarios_waffle_gg 2.1.0.26 Voronoi https://rspatial_es.gitlab.io/blog/2020-08-02-diagrama-voronoi-r-ggplot/ 2.1.0.27 Densidad 2D Densidad con líneas concéntricas: ## Base layers p &lt;- ggplot(faithful, aes(x = waiting, y = eruptions)) + scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) + scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) + coord_fixed(60 / 4.5) ## 1 - Use geom_density_2d() p + geom_density_2d() ## 2 - Use stat_density_2d() with arguments p + stat_density_2d(aes(col = ..level..), h = c(5, 0.5)) Densidad con gradiente: ## Load in the viridis package library(viridis) ## Add viridis color scale ggplot(faithful, aes(x = waiting, y = eruptions)) + scale_y_continuous(limits = c(1, 5.5), expand = c(0,0)) + scale_x_continuous(limits = c(40, 100), expand = c(0,0)) + coord_fixed(60/4.5) + stat_density_2d(geom = &quot;tile&quot;, aes(fill = ..density..), h=c(5,.5), contour = FALSE) + scale_fill_viridis() 2.1.0.28 Gráficos animados library(gganimate) library(tween) library(ggplot2) 2.1.0.28.0.1 Animar según otra variable p&lt;- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) + geom_point() + ##Gráfico de dispersión común transition_states(Species, ##Anima los puntos según variable transition_length = 2, state_length = 1) + ease_aes(&#39;cubic-in-out&#39;) + ##suavizar animación ggtitle(&#39;Now showing {closest_state}&#39;, subtitle = &#39;Frame {frame} of {nframes}&#39;) ##Título con estados de la animación transition_states() splits up plot data by a discrete variable and animates between the different states. ease_aes() defines the velocity with which aesthetics change during an animation. 2.1.0.28.0.2 Animar transiciones de entrada y salida: anim &lt;- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) + geom_point(aes(colour = Species), size = 2) + transition_states(Species, transition_length = 2, state_length = 1) anim + enter_fade() + exit_shrink() enter and exit functions are used to modify the aesthetics of appearing and disappearing data so that their entrance or exit may be animated. 2.1.0.28.0.3 Agregar título Si es transition_reveal: labs(x = &quot;Años&quot;, y = &quot;Nacimientos&quot;, title=&quot;Año {as.integer(frame_along)}&quot;) + Si es transition_states: labs(x = &quot;Años&quot;, y = &quot;Nacimientos&quot;, title=&quot;Año {closest_state}&quot;) + ggtitle(&#39;Año {closest_state}&#39;) ##título de años 2.1.0.28.0.4 Exportar: animate(gA_anim, nframes=300, fps=24, width=750, height=675, res=150, end_pause = 30) anim_save(&quot;Animación2.gif&quot;, animation = last_animation()) nframes es la cantidad total de cuadros de la animación fps son los cuadros por segundo de la animación end_pause son cuadros de pausa al final de la animación rewind=TRUE para rebobinar. Ejemplo: library(ggplot2) library(gganimate) p&lt;- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) + geom_point() + ##Gráfico de dispersión común transition_states(Species, transition_length = 2, state_length = 1) + ##Anima los puntos según variable ease_aes(&#39;cubic-in-out&#39;) + ##suavizar animación ggtitle(&#39;Now showing {closest_state}&#39;, subtitle = &#39;Frame {frame} of {nframes}&#39;) ##Título con estados de la animación animate(p, nframes=300, fps=30) anim_save(&quot;Animación2.gif&quot;, animation = last_animation()) https://www.datanovia.com/en/blog/gganimate-how-to-create-plots-with-beautiful-animation-in-r/##show-preceding-frames-with-gradual-falloff Regresión: http://varianceexplained.org/files/loess.html 2.1.0.28.0.5 Gráficos de países que se van adelantando https://towardsdatascience.com/create-animated-bar-charts-using-r-31d09e5841da https://stackoverflow.com/questions/53162821/animated-sorted-bar-chart-with-bars-overtaking-each-other?source=post_page————————— nata&lt;-read.csv(&quot;nata.csv&quot;, sep=&quot;;&quot;) names(nata)[2] &lt;- &quot;2000&quot; names(nata)[3] &lt;- &quot;2001&quot; names(nata)[4] &lt;- &quot;2002&quot; names(nata)[5] &lt;- &quot;2003&quot; names(nata)[6] &lt;- &quot;2004&quot; names(nata)[7] &lt;- &quot;2005&quot; names(nata)[8] &lt;- &quot;2006&quot; names(nata)[9] &lt;- &quot;2007&quot; names(nata)[10] &lt;- &quot;2008&quot; names(nata)[11] &lt;- &quot;2009&quot; names(nata)[12] &lt;- &quot;2010&quot; names(nata)[13] &lt;- &quot;2011&quot; names(nata)[14] &lt;- &quot;2012&quot; names(nata)[15] &lt;- &quot;2013&quot; names(nata)[16] &lt;- &quot;2014&quot; names(nata)[17] &lt;- &quot;2015&quot; names(nata)[18] &lt;- &quot;2016&quot; library(ggplot2) library(gganimate) library(tidyverse) library(janitor) library(scales) #### Aplicar guía a mis datos #### Cambiar formato de base de datos a &quot;long format&quot; nata_tidy &lt;- nata %&gt;% mutate_at(vars(contains(&quot;20&quot;)),as.numeric) %&gt;% ##selecionar los años gather(year,value,2:18) %&gt;% ##elegir las columnas de los años janitor::clean_names() %&gt;% mutate(year = as.numeric(stringr::str_sub(year,1,4))) write_csv(nata_tidy,&quot;nata_tidy.csv&quot;) View(nata_tidy) View(nata) #### We’re going to filter our dataset to retain only the top 10 countries for every given year nata_tidy &lt;- read_csv(&quot;nata_tidy.csv&quot;) nata_formatted &lt;- nata_tidy %&gt;% group_by(year) %&gt;% ## The * 1 makes it possible to have non-integer ranks while sliding mutate(rank = rank(-value), Value_rel = value/value[rank==1], Value_lbl = paste0(&quot; &quot;,round(value/1e9))) %&gt;% group_by(region) %&gt;% filter(rank &lt;=10) %&gt;% ungroup() View(nata_formatted) #### Gráfico seguido de animación staticplot = ggplot(nata_formatted, aes(rank, group = region, fill = as.factor(region), color = as.factor(region))) + geom_tile(aes(y = value/2, height = value, width = 0.9), alpha = 0.8, color = NA) + geom_text(aes(y = 0, label = paste(region, &quot; &quot;)), vjust = 0.2, hjust = 1) + geom_text(aes(y=value,label = paste(round(value,digits= 1)), hjust=-0.2)) + coord_flip(clip = &quot;off&quot;, expand = FALSE) + scale_y_continuous(labels = scales::comma) + scale_x_reverse() + guides(color = FALSE, fill = FALSE) + theme(axis.line=element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(), axis.ticks=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(), legend.position=&quot;none&quot;, panel.background=element_blank(), panel.border=element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(), panel.grid.major.x = element_line( size=.1, color=&quot;grey&quot; ), panel.grid.minor.x = element_line( size=.1, color=&quot;grey&quot; ), plot.background=element_blank(), plot.margin = margin(1,1, 1, 4, &quot;cm&quot;)) animacion = staticplot + transition_states(year, transition_length = 2, state_length = 4) + view_follow(fixed_x = TRUE) + labs(title = &#39;Tasa de natalidad anual: {closest_state}&#39;) animate(animacion, nframes=640, fps=30, width=400, height=400, res=100, detail=2) anim_save(&quot;Natalidad regiones.gif&quot;, animation = last_animation()) 2.1.0.29 Cortar datos en intervalos ## Plot object p p &lt;- ggplot(diamonds, aes(x = carat, y = price)) ## Use cut_interval p + geom_boxplot(aes(group = cut_interval(carat, n=10))) ## Use cut_number p + geom_boxplot(aes(group = cut_number(carat, n=10))) ## Use cut_width p + geom_boxplot(aes(group = cut_width(carat, width=0.25))) 2.1.0.30 Mapas Graficar mapas en ggplot2 2.1.0.30.0.1 Graficar mapas de Chile Paquete Chilemapas https://github.com/pachamaltese/chilemapas 2.1.0.30.0.2 Recortar mapa mapa_cortado &lt;- st_crop(mapa, xmin = -20, xmax = 45, ymin = 30, ymax = 73) 2.1.0.30.0.3 Cambiar formato de coordenadas Necesario cuando se usan dos mapas distintos en un solo gráfico y sus sistemas de coordenadas difieren. Revisar el formato de coordenadas de los dos mapas: mapa1$geometry mapa2$geometry Cambiar uno por el del otro: mapa2$geometry &lt;- st_transform(mapa2$geometry, crs = 32719) 2.1.0.30.0.4 Acercarse a un mapa mapa + coord_sf(ylim=c(-30, -10), xlim=c(-80, -60)) 2.1.0.30.0.5 Importar shape El archivo .shp tiene que estar dentro de la carpeta con el resto de archivos necesarios. mapa &lt;- sf::st_read(&quot;Catastro_Campamentos_2019/Catastro_Campamentos_2019/Catastro_Campamentos_2019.shp&quot;) 2.1.0.30.0.6 Geocodificar https://www.jessesadler.com/post/geocoding-with-r/ 2.2 Figuras y capas Agregar figuras o capas extra a un gráfico 2.2.0.1 Agregar capas condicionales switch=TRUE datos %&gt;% ggplot(aes(x, y)) + {if(switch) geom_hline(yintercept = 15)}+ geom_point() geom_line(data = subset(afp_cotizantes2, región==&quot;Iquique&quot;), size=1) + geom_line(data = subset(afp_cotizantes2, región!=&quot;Iquique&quot;), size=0.5, show.legend = FALSE) + https://gist.github.com/jcheng5/3971908 2.2.0.2 Agregar barras de brecha: casen %&gt;% filter(region==&quot;Región de Tarapacá&quot;) %&gt;% rename(trabajan=o1) %&gt;% group_by(sexo, comuna, trabajan) %&gt;% summarise(cantidad=n()) %&gt;% mutate(porcentaje = cantidad/sum(cantidad)) %&gt;% group_by(comuna) %&gt;% mutate(diferencia = porcentaje[sexo == &quot;Mujer&quot;] - porcentaje) %&gt;% group_by(comuna, trabajan) %&gt;% mutate(mujer = porcentaje[sexo == &quot;Mujer&quot;]) %&gt;% mutate(hombre = porcentaje[sexo == &quot;Hombre&quot;]) %&gt;% filter(trabajan==&quot;Sí&quot;) %&gt;% ##filter(!is.na(trabajan)) %&gt;% ##graficar ggplot(aes(fct_reorder(str_wrap(comuna, 4), diferencia), porcentaje, fill=sexo)) + ##facet_wrap(~comuna, strip.position = &quot;bottom&quot;) + geom_col(position=&quot;dodge&quot;, width=0.8) + geom_text(aes(label = percent(porcentaje)), position = position_dodge2(width=0.8), hjust = 1.2, vjust=0.5, size=3.5, angle=90, color=&quot;white&quot;) + geom_linerange(aes(ymin = mujer, ymax = hombre, linetype=&quot;Brecha\\nde género&quot;), size=3, col=&quot;##DF1A57&quot;) 2.2.0.3 Líneas verticales grises Agregar linea Verticales: theme(panel.grid.major.x = element_line(color=&quot;gray90&quot;)) Horizontales: theme(panel.grid.major.y = element_line(color=&quot;gray90&quot;)) 2.2.0.4 Poner logo en esquina del gráfico Importar logo: logo_tarapaca &lt;- readPNG(&quot;logo_tarapaca_2.png&quot;) coord_cartesian(clip=&quot;off&quot;) + annotation_custom(grob = rasterGrob(logo_tarapaca_chico, width=unit(2,&#39;cm&#39;), hjust = 7, vjust=-0.3, x = unit(1,&quot;npc&quot;), y = unit(1,&quot;npc&quot;))) Ajustar hjust y vjust Si el gráfico está horizontal: coord_flip(clip=&quot;off&quot;) + 2.2.0.5 Insertar flechas en el gráfico library(gridExtra) annotate( &quot;segment&quot;, x=dates, xend=dates, y=prices-11, yend=prices-1, color=&quot;blue&quot;, arrow=arrow(length=unit(0.05,&quot;npc&quot;) )) Afuera del gráfico annotate(&quot;segment&quot;, x=4.5, xend=3, y=-70, yend=-70, col=&quot;black&quot;, arrow=arrow(length=unit(0.3, &quot;cm&quot;))) + scale_y_continuous(expand=c(0,0)) + coord_cartesian(ylim = c(0, 700), clip=&quot;off&quot;) + theme(plot.margin = unit(c(1,1,3,1), &quot;lines&quot;)) 2.2.0.6 Agregar línea horizontal de promedio geom_hline(yintercept = mean(Indcatotvalue), color=&quot;blue&quot;) 2.2.0.7 Graficar una única variable ggplot(mammals[mammals$vore == &quot;Insectivore&quot;, ], aes(x = sleep_total, fill = vore)) + geom_density(col = NA, alpha = 0.35) + scale_x_continuous(limits = c(0, 24)) + coord_cartesian(ylim = c(0, 0.3)) 2.2.0.8 Insertar barras geom_vline geom_hline geom_rect(data = recess, aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf), inherit.aes = FALSE, fill = &quot;red&quot;, alpha = 0.2) + geom_vline(xintercept=0) 2.2.0.9 Guardar y aplicar capas BMI_fill &lt;- scale_fill_brewer(&quot;BMI Category&quot;, palette = &quot;Reds&quot;) Luego esta capa puede aplicarse con + BMI_fill Otro ejemplo: fix_strips &lt;- theme(strip.text.y = element_text(angle = 0, hjust = 0, vjust = 0.1, size = 14), strip.background = element_blank(), legend.position = &quot;none&quot;) ggplot(...) + fix_strips 2.2.0.10 Shapes Las figuras shape de 21 a 25 tienen borde y relleno independientes. 2.3 Texto Operaciones que se pueden realizar sobre el texto de los gráficos 2.3.0.1 Insertar texto en el gráfico annotate(&quot;text&quot;, x=2.8, y=-0.025, hjust=1, col=&quot;black&quot;, label=&quot;Menores ingresos&quot;) + annotate(&quot;text&quot;, x=8.4, y=-0.025, hjust=0, col=&quot;black&quot;, label=&quot;Mayores ingresos&quot;) + hjust = 1 significa que el texto se posiciona desde el borde derecho, 0 depende del borde izquierdo. Para ponerlas fuera del gráfico: coord_cartesian(clip = &#39;off&#39;) + theme(plot.margin = unit(c(1,1,3,1), &quot;lines&quot;)) + ##extender área hacia abajo 2.3.0.2 Texto en barras Crear variable que calcule el porcentaje: basura &lt;- basura %&gt;% ##crear variable que mide el porcenaje mutate(Porcentaje = (`Toneladas al año` / sum(`Toneladas al año`) * 100)) + geom_text(aes(label = percent(Porcentaje)), color=&quot;gray25&quot;, size=3, hjust = -0.2) + Cuando son barras stack: geom_text(aes(label = percent(porcentaje)), color=&quot;gray25&quot;, size=3, hjust = 0.5, vjust=0.5, position=&quot;stack&quot;) + Para centrar el número en las barras: geom_text(aes(label = percent(porcentaje)), color=&quot;gray25&quot;, size=3, hjust = 0.5, vjust=0.5, position = position_stack(vjust = 0.5)) + Para variables categóricas o factores: geom_text(aes(y = ((..count..)/sum(..count..)), label = scales::percent((..count..)/sum(..count..))), stat = &quot;count&quot;, hjust = -0.1, size=3, color=&quot;white&quot;) + porcentaje total de las barras stacked con datos tidy: stat_summary(fun.y = sum, aes(label = paste0(round(..y..*100, digits=1), &quot;%&quot;), group = Comuna), geom = &quot;text&quot;, vjust=-0.5, size=3, col=&quot;gray25&quot;) + Alternativa para pegar total geom_text( aes(label = stat(y)), stat = &#39;summary&#39;, fun.y = sum, vjust = -1 ) + Para barras dodge con coord_flip turismo %&gt;% filter(!is.na(edad)) %&gt;% group_by(edad, genero, periodo) %&gt;% summarize(cantidad=n()) %&gt;% ggplot(aes(edad, cantidad)) + geom_col(aes(fill=genero), position = &quot;dodge&quot;) + coord_flip() + geom_text(aes(label = cantidad), position = position_dodge2(width=1), size=3.5, hjust=-0.5) + facet_wrap(~periodo) Para permitir que el texto se salga del margen del gráfico hay que poner clip = off y expandir el margen del gráfico con plot.margin: coord_cartesian(clip = &#39;off&#39;) + theme(plot.margin = unit(c(1,1,1,1),&quot;cm&quot;)) ##top right bottom left 2.3.0.3 Mostrar texto en el gráfico según condición Mostrar etiquetas sólo para puntos o segmentos superiores a una cantidad. Usando mutate, las etiquetas que no cumplan la función quedan en blanco, manteniendo su posición: ##Texto grande geom_text(aes(label = ifelse(Cantidad &gt; 1000, Cantidad, &quot;&quot;)), position = position_dodge2(width=0.8), size=3, color=&quot;red&quot;, hjust=1.2) + ##Texto chico geom_text(aes(label = ifelse(Cantidad &lt; 1000, Cantidad, &quot;&quot;)), position = position_dodge2(width=0.8), size=3, color=&quot;green&quot;, hjust=-0.2) + Poner sólo los porcentajes grandes en un gráfico de barras stacked: geom_text(aes(label = ifelse(Porcentaje &gt; 0.12, percent(Porcentaje, accuracy = 0.1), &quot;&quot;)), ##position = position_dodge2(width=0.8), position = position_stack(vjust = .5), size=2.5, color=&quot;white&quot;) + Para un texto más complejo (con paste, porcentaje y frecuencia) ##Texto grande geom_text(aes(label = ifelse(porcentaje &gt; .1, paste(percent(porcentaje, accuracy = 0.1), &quot;-&quot;, format(cantidad, big.mark=&quot;.&quot;)), &quot;&quot;)), position = position_dodge2(width=0.7), size=3, color=&quot;red&quot;, hjust=1.2) + ##Texto chico geom_text(aes(label = ifelse(porcentaje &lt; .1, paste(percent(porcentaje, accuracy = 0.1), &quot;-&quot;, format(cantidad, big.mark=&quot;.&quot;)), &quot;&quot;)), position = position_dodge2(width=0.7), size=3, color=&quot;green&quot;, hjust=-0.2) + 2.3.0.4 Poner valores sobre las barras geom_text(aes(label=variabley), vjust=1.5, hjust=0.5, col=&quot;white&quot;) Para dodge: geom_text(aes(label = percent(var1), y = var1 + .03), position = position_dodge(0.9), vjust = 1) Si se trata de un factor: geom_text(stat=&#39;count&#39;, aes(label=..count..), vjust=0.5) + 2.3.0.5 Repeler etiquetas de los puntos library(ggplot2) library(ggrepel) x = c(0.8846, 1.1554, 0.9317, 0.9703, 0.9053, 0.9454, 1.0146, 0.9012, 0.9055, 1.3307) y = c(0.9828, 1.0329, 0.931, 1.3794, 0.9273, 0.9605, 1.0259, 0.9542, 0.9717, 0.9357) z= c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;) df &lt;- data.frame(x = x, y = y, z = z) ggplot(data = df, aes(x = x, y = y)) + theme_bw() + geom_text_repel(aes(label = z), box.padding = unit(0.45, &quot;lines&quot;)) + geom_point(colour = &quot;green&quot;, size = 3) ggplot(dt, aes(x = one, y = two, color = diff_cat)) + geom_point() + geom_text_repel(data = . %&gt;% mutate(label = ifelse(diff_cat %in% c(&quot;type_1&quot;, &quot;type_2&quot;) &amp; abs(diff) &gt; 2, name, &quot;&quot;)), aes(label = label), box.padding = 1, show.legend = FALSE) + ##this removes the &#39;a&#39; from the legend coord_cartesian(xlim = c(-5, 5), ylim = c(-5, 5)) + theme_bw() 2.3.0.6 Convertir etiquetas a minúscula, mayúscula, titulares, o frase stringr::str_to_upper(string, locale = &quot;es&quot;) stringr::str_to_lower(string, locale = &quot;es&quot;) stringr::str_to_title(string, locale = &quot;es&quot;) stringr::str_to_sentence(string, locale = &quot;es&quot;) 2.3.0.7 Poner suma de los factores sobre una barra stacked stat_summary(fun.y = sum, ##pone como texto la suma de los factores en cada barra aes(label = ..y.., group = Año), geom = &quot;text&quot;, vjust=-0.5, size=3, col=&quot;gray25&quot;) + 2.3.0.8 Ajustar cita o referencia Horizontalmente: plot.caption = element_text(hjust = 1.4)) + 2.3.0.9 Mover título y subtítulo Horizontalmente: plot.title = element_text(hjust = 0.3), plot.subtitle = element_text(hjust = 0.3), 2.3.0.10 Buscar y reemplazar palabras de las etiquetas ## buscar y reemplazar palabras para borrarlas de las etiquetas eme2 &lt;- eme2 %&gt;% mutate(tramo_ingresos = str_replace(tramo_ingresos, &quot;Entre &quot;, &quot;&quot;)) %&gt;% mutate(tramo_ingresos = str_replace(tramo_ingresos, &quot;y&quot;, &quot;a&quot;)) 2.3.0.11 Redondear cifras round(variable, digits=1) Ejemplo: geom_text(aes(label = paste0(##pegar símbolo de porcentaje round(Porcentaje, digits=1),##redondear cifra &quot;%&quot;)), color=&quot;white&quot;, size=3.5, position=position_stack(vjust = 0.5)) + 2.3.0.12 Pegar signo de porcentaje paste0(Porcentaje,&quot;%&quot;) Ejemplo: geom_text(aes(label = paste0(##pegar símbolo de porcentaje round(Porcentaje, digits=1),##redondear cifra &quot;%&quot;)), color=&quot;white&quot;, size=3.5, position=position_stack(vjust = 0.5)) + 2.3.0.13 Cambiar etiquetas del gráfico Cambiar títulos de los ejes + labs(x=&quot;Título del eje x&quot;, y=&quot;Título del eje y&quot;) titled_plot &lt;- initial_plot + labs(title = &quot;Hell Is Other People In A Pressurized Metal Tube&quot;, subtitle = &quot;Percentage of 874 air-passenger respondents who said action is very or somewhat rude&quot;, caption = &quot;Source: SurveyMonkey Audience&quot;, x = &quot;&quot;, y = &quot;&quot;) 2.3.0.14 Poner nombre de barras dentro de las barras Para que el texto o etiqueta del eje y o x aparezca dentro de la barra: En gráficos con coord_flip: geom_text(aes(label = str_to_title(variable), y=0.02), hjust=0, size = 3.2, col=&quot;white&quot;) + theme(axis.text.y = element_blank()) ##ocultar eje Sin coord_flip: geom_text(aes(label = str_to_title(variable), y=0.02), angle=90, hjust=0, size = 3.2, col=&quot;white&quot;) + theme(axis.text.x = element_blank()) 2.3.0.15 Calcular porcentajes Calcular porcentaje por categorías: group_by(gastos_forma, periodo, extranjeros) %&gt;% summarise(cantidad = n()) %&gt;% mutate(porcentaje = cantidad/sum(cantidad)) %&gt;% ##Porcentaje Calcular porcentaje respecto del total: group_by(gastos_forma, periodo, extranjeros) %&gt;% summarise(cantidad = n()) %&gt;% ungroup() %&gt;% mutate(porcentaje = cantidad/sum(cantidad)) %&gt;% ##Porcentaje Hay que agregar un ungroup. Agregar fila con suma de totales: adorn_totals(&quot;row&quot;) %&gt;% Agregar columna con suma de totales: adorn_totals(&quot;col&quot;, name = &quot;Total&quot;) %&gt;% 2.3.0.16 Poner texto al final del gráfico de líneas geom_text(aes(label = ifelse(Año==2018, str_pad(number(media, accuracy = 1, big.mark=&quot;.&quot;), 20, side=&quot;right&quot;), &quot;&quot;)), size=3, hjust=-0.15) + Puede que sea necesario mover la leyenda hacia la derecha: theme(legend.box.margin=margin(c(0,0,0,10))) + 2.3.0.17 Formatear números Quitar decimales a un número que por ejemplo es una media: round(Toneladas, digits = 2) 2.3.0.18 Añadir texto antes o después del nombre de la variable ggplot(aes(x = paste(&quot;texto&quot;, variable))) scale_x_continuous(labels = function(x) paste(x, &quot;años&quot;), 2.3.0.19 Formatear una fecha Hay que tener instalado el locale necesario, en este caso el de español. Activar el locale: Sys.setlocale(category = &quot;LC_TIME&quot;, locale=&quot;es_ES.UTF-8&quot;) ##Meses en español Luego las fechas usarán meses en castellano: format(max(covid_comuna$Fecha), &quot;%d de %B&quot;) 2.3.0.20 Aumentar el tamaño de todo el texto theme(text = element_text(size=16)) 2.3.0.21 Cambiar tipografía library(extrafont) theme(plot.title = element_text(size=18, family=&quot;Bebas Kai&quot;, color=&quot;##1c2366&quot;), Cambiar todo el texto: text = element_text(family=&quot;Open Sans&quot;), Ver tipografías instaladas: extrafont::fonts() 2.3.0.22 Cambiar color de un texto según condición Crear la condición necesaria y poner como categorías de la variable los colores a elegir: datos %&gt;% mutate(Region2 = case_when(Region==&quot;Tarapacá&quot; ~ &quot;##red&quot;, TRUE ~ &quot;gray80&quot;)) Luego agregar en el geom: geom_text(aes(x=Comuna, y=-50, label = Region), color = datos$Region2) 2.3.0.23 Añadir valor o texto a las etiquetas del eje x scale_x_discrete(labels = paste0(Region, &quot;\\n&quot;, Poblacion)) 2.3.0.24 Ajustar etiquetas largas Para cortar la categorías largas, por ejemplo, en la leyenda de un gráfico o las etiquetas de un eje: datos %&gt;% ggplot(aes(variable, str_wrap(variable, width = 35))) + geom_line() Donde el número es los caracteres del ancho de línea. Para aplicar desde fuera: scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) Para mantener el orden de los factores: str_wrap_factor &lt;- function(x, ...) { levels(x) &lt;- str_wrap(levels(x), ...) x } Y luego usar str_wrap_factor del mismo modo que str_wrap Cortar factores: mutate(ocupación_CIUO = str_trunc(as.character(ocupación_CIUO), 30, side=&quot;right&quot;)) %&gt;% Luego volver a convertir a factor. 2.3.0.25 ggtext Enhance Your ggplot2 Data Visualizations with ggtext 2.4 Escalas Manipulación de las escalas de los gráficos, que son los elementos que controlan la disposición espacial de las observaciones en el plano. 2.4.0.1 Ordenar grafico de barras Ordenar las barras para que una categoría del stack vaya de mayor a menor: crear una variable con case_when que sea un valor numérico, luego sumar esos valores numéricos en summarize según los grupos. turismo2 %&gt;% mutate(orden = case_when(interés == &quot;Es de interes&quot; ~ &quot;1&quot;, TRUE ~ &quot;0&quot;)) %&gt;% mutate(orden = as.numeric(orden)) %&gt;% group_by(ubicación, interés, orden) %&gt;% summarize(cantidad = n(), orden2 = sum(orden)) %&gt;% ggplot(aes(fct_reorder(ubicación, orden2), porcentaje, fill=interés)) Alternativa: crear variable de orden con un subset group_by(Region) %&gt;% mutate(Orden = Valor[Grupo == &quot;Casos&quot;]) %&gt;% ggplot(aes(fct_reorder(Region, Orden), Valor, fill = Grupo)) + 2.4.0.2 Expandir un eje Por ejemplo, si una línea queda muy corta en la parte superior de un gráfico de densidad. Similar a coord_cartesian scale_y_discrete(expand = expand_scale(add = c(0.3, 5.5))) + 2.4.0.3 Poner comas en los ejes scale_x_continuous(labels = scales::comma) 2.4.0.4 Intercambiar ejes + coord_flip() Intercambiar y cortar o extender: coord_flip(xlim=c(0, 800)) + 2.4.0.5 Cambiar orden de los ejes ggplot(aes(x = logFoldChange, y = reorder(variable, variable_de_ordenamiento)) + geom_point() Invertir el orden: ggplot(datos, aes(x=fct_rev(var1), y=...)) Reordenar ascendente: ggplot(datos, aes(x = fct_infreq(var1), y=... Reordenar descendente ggplot(datos, aes(x = fct_rev(fct_infreq(variable)))) Reordenar según otra variable ggplot(datos, aes(x= fct_reorder(variable, referencia), y=... Según otra pero en descendiente: mutate(Genre = fct_reorder(Genre, n, .desc = TRUE)) Reordenar manualmente: name = factor(name, levels=c(&quot;north&quot;, &quot;north-east&quot;, &quot;east&quot;, &quot;south-east&quot;, &quot;south&quot;, &quot;south-west&quot;, &quot;west&quot;, &quot;north-west&quot;))) Reordenar según suma de los valores del eje: ggplot(aes(x=fct_reorder(Comuna, Porcentaje, .fun=sum, .desc=TRUE) Util cuando son barras stacked y hay que ordenar por la suma de los factores 2.4.0.6 Girar etiquetas del eje x Girar etiquetas del eje, dándole ángulo o poniéndola horizontal, por ejemplo axis.text.x = element_text(angle = -90, hjust=0)) + hjust justifica el texto Girar a la derecha y justificar: theme(axis.text.x = element_text(hjust=0, vjust=0.5, angle = -90) 2.4.0.7 Cambiar márgenes de elementos theme(axis.text.x = element_text(margin = margin(t = 0)), axis.text.y = element_text(margin = margin(r = -5)), plot.subtitle = element_text(margin = margin(b = 15))) 2.4.0.8 Mostrar todas las etiquetas del eje x Mostrar todas las etiquetas del eje x scale_x_continuous(&quot;ID&quot;, labels = as.character(ID), breaks = ID) scale_x_continuous(breaks = c(1973:1980)) 2.4.0.9 Definir cortes del eje y scale_y_continuous(breaks = c(10, 50, 100, 150, 200)) + También sirve para eliminar el 0 del eje. Para combinar con logaritmo: , trans=\"log10\" 2.4.0.10 Transformar escalas a logaritmo ## Transform the scale d + scale_y_log10() ## Transform the coordinates d + coord_trans(y=&quot;log10&quot;) 2.4.0.11 Agregar alfombra Muestra los puntos exactos donde existen datos. + geom_rug() 2.4.0.12 Cambiar eje a logaritmo Para cambiar una escala a logarítmica: + scale_x_log10() 2.4.0.13 Ampliar eje Para que un eje empiece desde cero y así se elimine el margen o espaciado por defecto de ggplot: expand_limits(y=0) coord_flip(expand=FALSE) scale_x_discrete(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) 2.4.0.14 Insertar un nivel en blanco para una escala Para que en la leyenda aparezca un espacio vacío entremedio. Primero agregar el nivel blanco con \\n: previsión_t$previsión = factor(previsión_t$previsión, levels=c(&quot;Fonasa A&quot;, &quot;Fonasa B&quot;, &quot;Fonasa C&quot;, &quot;Fonasa D&quot;, &quot;Fonasa desconocido&quot;, &quot;\\n\\n&quot;,&quot;Isapre&quot;, &quot;FF.AA. y de Orden&quot;, &quot;Ninguno (Particular)&quot;, &quot;Otro sistema&quot;)) Luego definir el color blanco y determinar que no se salte el nivel al estar vacío. scale_fill_manual(values = c(degradado1(4), &quot;gray70&quot;, &quot;white&quot;, ##Color del nivel en blanco degradado4(3), &quot;gray70&quot;), drop = FALSE) + ##Determinar que el nivel en blanco no se salte 2.4.0.15 Escalas de series de tiempo https://www.statworx.com/at/blog/customizing-time-and-date-scales-in-ggplot2/ Configurar el eje x cuando es fecha: scale_x_date(breaks = seq(from = ymd(&#39;2020-03-30&#39;), to = max(covid_comuna$Fecha), ##by=1), length.out=12), date_labels = &quot;%d/%B&quot;) + La opción by=1 pone un break por fecha, y length.out pone la cantidad de breaks definidos, dispersados entre el menos y el mayor. 2.4.0.16 Cambiar escalas continuas scale_fill_viridis(option=&quot;magma&quot;, ##color name = &quot;Porcentaje \\nde votantes&quot;, breaks = c(0, 25, 50, 75, 100), labels=c(&quot;0%&quot;, &quot;25%&quot;, &quot;50%&quot;, &quot;75%&quot;, &quot;100%&quot;), limits=c(20,80)) + 2.4.0.17 Escalas Cambiar el rango de tamaños de los puntos + scale_size(range = c(1, 10)) Etiquetas en la escala manualmente: scale_y_continuous(breaks = c(300000, 1000000,5000000,10000000)) Etiquetas menores en la escala: scale_x_continuous(breaks = c(1990, 1995, 2000, 2005, 2010, 2014, 2017), minor_breaks = seq(1991, 2016, 1)) + Secuencia de breaks en la escala: scale_y_continuous(limits = c(0, 12000), breaks = seq(0,12000,by = 2000) 2.4.0.18 Escala en miles Puntos de miles en la escala: scale_y_continuous(labels = function(x) format(x, big.mark = &quot;.&quot;)) + Escala de miles O bien: scale_size_continuous(labels = scales::number) + 2.4.0.19 Escala en porcentajes library(scales) scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + Pegar porcentaje en eje (si los valores ya vienen multiplicados por 100: scale_y_continuous(labels = function(x) paste0(x, &quot;%&quot;)) + 2.5 Colores Operaciones que permiten controlar y modificar los colores utilizados en los gráficos. 2.5.0.1 Agregar más de una escala de color https://eliocamp.github.io/ggnewscale/ 2.5.0.2 Escalas continuas de colores (degradado) Definir color del mínimo y máximo: scale_fill_gradient(low = &quot;gray90&quot;, high = color_verde) + Definir color del mínimo, intermedio y máximo: scale_color_gradient2(low = colorspace::darken(color_verde, 0.2), mid = colorspace::darken(color_verde, 0.4), high = &quot;white&quot;, midpoint = 3.8) + Opcionalmente, definir en midpoint el punto que equivale al intermedio. 2.5.0.3 Aplicar paleta de colores específicas a determinadas variables cyl &lt;- sort(unique(mpg$cyl)) ncat &lt;- length(cyl) ## 4 types of cylinders ## create palettes library(RColorBrewer) purples &lt;- tibble(cyl, colr = brewer.pal(ncat, &quot;Purples&quot;)) reds &lt;- tibble(manufacturer = &quot;audi&quot;, cyl, colr = brewer.pal(ncat, &quot;Reds&quot;)) blues &lt;- tibble(manufacturer = &quot;ford&quot;, cyl, colr = brewer.pal(ncat, &quot;Blues&quot;)) ## merge them with the data dd_p &lt;- dd %&gt;% filter(!(manufacturer %in% c(&quot;audi&quot;, &quot;ford&quot;))) %&gt;% left_join(purples) dd_r &lt;- dd %&gt;% filter(manufacturer == &quot;audi&quot;) %&gt;% left_join(reds) dd_b &lt;- dd %&gt;% filter(manufacturer == &quot;ford&quot;) %&gt;% left_join(blues) gg_dd &lt;- rbind(dd_p, dd_r, dd_b) %&gt;% left_join(mm) gg_dd %&gt;% ggplot(mapping = aes(x = reorder(manufacturer, mcyl), y = n, fill = colr)) + geom_bar(stat = &quot;identity&quot;, position = &quot;fill&quot;) + coord_flip() + scale_fill_identity() 2.5.0.4 Aplicar escala de color automática Primero crear la escala de color con tantos colores como se necesiten: degradado &lt;- colorRampPalette(c(&quot;##DF1A57&quot;, &quot;##AF87EB&quot;, &quot;##1D3284&quot;)) Luego aplicar la escala al gráfico, determinando el número de colores a usar: scale_color_manual(values = degradado(7), aesthetics = c(&quot;fill&quot;, &quot;col&quot;)) + 2.5.0.5 Crear escala o degradado de colores degradado &lt;- colorRampPalette(c(&quot;##DF1A57&quot;, &quot;##c444c4&quot;, &quot;##6739b2&quot;, &quot;##1D3284&quot;), bias=0.9) Bias es la separación de los colores en los extremos de la escala. Un bias alto (mayor a 1) hace que los colores cambien más rápido y uno bajo (cercano a 0) distribuye los colores más suavemente. 2.5.0.6 Previsualizar colores Para ver un color o vector de colores: scales::show_col(&quot;##DF1A57&quot;) scales::show_col(c(&quot;##DF1A57&quot;, &quot;##c444c4&quot;, &quot;##6739b2&quot;, &quot;##1D3284&quot;)) scales::show_col(degradado7b(7)) 2.5.0.7 Aclarar u oscurecer colores colorspace::lighten(&quot;red&quot;, amount = 0.5) scales::show_col(colorspace::lighten(color_naranjo, amount = 0.6)) 2.5.0.8 RColorBrewer scale_fill_brewer(palette = &quot;Dark2&quot;) + Para ver todas las paletas disponibles: RColorBrewer::display.brewer.all() Extraer colores: colores_presidencial &lt;- rev(brewer.pal(9, &#39;YlGnBu&#39;)) ##extraer paleta de colores Luego aplicar como gradiente: scale_fill_gradientn(colours = colores_presidencial, ##crear gradiente de colores name = &quot;Porcentaje \\nde votantes&quot;, breaks = c(10, 30, 50, 70, 90)) + 2.5.0.9 Crear degradados de color Crear escala de colores entre colores específicos: degradado1 &lt;- colorRampPalette(c(&quot;##DF1A57&quot;, &quot;##AF87EB&quot;, &quot;##1D3284&quot;)) Luego aplicar así: scale_color_manual(values = degradado1(5)) + Donde el número es la cantidad de colores 2.5.0.10 Extender escalas de colores ## Definition of a set of blue colors blues &lt;- brewer.pal(9, &quot;Blues&quot;) ## from the RColorBrewer package ## 1 - Make a color range using colorRampPalette() and the set of blues blue_range &lt;- colorRampPalette(blues) ## 2 - Use blue_range to adjust the color of the bars, use scale_fill_manual() ggplot(Vocab, aes(x = education, fill = vocabulary)) + geom_bar(position = &quot;fill&quot;) + scale_fill_manual(values=blue_range(11)) 2.5.0.11 Determinar colores para variable categórica colores_redes&lt;- c(&quot;Facebook&quot;=&quot;##1877f2&quot;,&quot;WhatsApp y similares&quot;=&quot;##25d366&quot;,&quot;Instagram&quot;=&quot;##c32aa3&quot;,&quot;Skype&quot;=&quot;##00aff0&quot;,&quot;Twitter&quot;=&quot;##1da1f2&quot;,&quot;Tinder y similares&quot;=&quot;##FF5864&quot;,&quot;Snapchat&quot;=&quot;##fffc00&quot;,&quot;LinkedIn&quot;=&quot;##007bb5&quot;) Luego, dependiendo del tipo del elemento: scale_fill_manual(values = colores_redes) + scale_color_manual(values = colores_redes) + 2.5.0.12 Más escalas de colores 2.5.0.12.0.1 Viridis scale_color_viridis() + scale_fill_viridis(option=&quot;magma&quot;) + “magma”, “plasma”, and “inferno.” discrete = TRUE Más paletas: - https://twitter.com/wearerladies/status/1180545410974257152?s=12 - https://github.com/EmilHvitfeldt/r-color-palettes/blob/master/type-sorted-palettes.md##qualitative-color-palettes 2.5.0.12.0.2 CartoColor https://github.com/Nowosad/rcartocolor Ver colores: cartocolor::display_carto_all() Usar: scale_fill_carto_c(name = &quot;Life expectancy: &quot;, type = &quot;diverging&quot;, palette = &quot;Earth&quot;, direction = -1) 2.5.0.12.0.3 Scico Ver colores: scico::scico_palette_show() Generar paleta: paleta &lt;- scico::scico(30, palette = &#39;lapaz&#39;) Usar escala: ggplot(volcano, aes(x = x, y = y, fill = height)) + geom_raster() + scale_fill_scico(palette = &#39;davos&#39;) 2.5.0.12.0.4 Fishualize devtools::install_github(&quot;nschiett/fishualize&quot;, force = TRUE) library(fishualize) paleta &lt;- fish(10, option = &quot;Ostracion_cubicus&quot;) Ver colores: https://nschiett.github.io/fishualize/articles/overview_colors.html scales::show_col(fishualize::fish(10, option = &quot;Antennarius_commerson&quot;)) Bonitas: Oncorhynchus_tshawytscha Bodianus_pulchellus Antennarius_commerson scales::show_col(fishualize::fish(10, option = &quot;Oncorhynchus_keta&quot;)) Ver lista de peces: spp &lt;- fishualize::fish_palettes() ##Escalas continuas: scale_color_fish(option = &quot;Hypsypops_rubicundus&quot;, direction = -1) ##Escalas discretas: scale_color_fishd(option = &quot;Hypsypops_rubicundus&quot;, direction = -1) scale_color_fish(option = &quot;Coris_gaimard&quot;, discrete = TRUE) 2.5.0.12.0.5 Ghibli https://ewenme.github.io/ghibli/index.html library(ghibli) scale_colour_ghibli_d(&quot;LaputaMedium&quot;, direction = -1) 2.5.0.12.0.6 PaletteR devtools::install_github(&quot;AndreaCirilloAC/paletter&quot;) library(paletter) image_path &lt;- &quot;path_to_your_image&quot; colours_vector &lt;- create_palette(image_path = image_path, number_of_colors =32, type_of_variable = “categorical&quot;) ggplot(data = mtcars, aes(x = rownames(mtcars),y = hp,color = rownames(mtcars), fill = rownames(mtcars))) + geom_bar(stat = &#39;identity&#39;) + scale_color_manual(values = colours_vector) + scale_fill_manual(values=colours_vector)+ 2.5.0.12.0.7 Pirate palette yarrr::piratepal(palette = &quot;all&quot;) 2.6 Leyendas Manipular la leyenda, o la sección del gráfico que contiene los colores y/o etiquetas de los elementos gráficos que lo componen. 2.6.0.1 Crear gráfico con leyenda manual Cuando los elementos el gráfico se hacen por capas separadas y por lo tanto no aparecen con leyenda: cols &lt;- c(&quot;Investigadores\\nhombres&quot;=&quot;##B077E5&quot;, &quot;Investigadoras\\nmujeres&quot;=&quot;##DF1A57&quot;, &quot;Total de\\ninvestigadores&quot;=&quot;##1D3284&quot;) investigadores %&gt;% rename(año=1) %&gt;% ##pivot_longer(cols=c(3:4), names_to=&quot;género&quot;, values_to=&quot;valor&quot;) %&gt;% ggplot(aes(año)) + geom_col(aes(y=total, fill=&quot;Total de\\ninvestigadores&quot;)) + geom_line(aes(y=mujeres, col=&quot;Investigadoras\\nmujeres&quot;), size=2, alpha=0.6) + geom_point(aes(y=mujeres, col=&quot;Investigadoras\\nmujeres&quot;), size=4) + geom_line(aes(y=hombres, col=&quot;Investigadores\\nhombres&quot;), size=2, alpha=0.6) + geom_point(aes(y=hombres, col=&quot;Investigadores\\nhombres&quot;), size=4) + ##texto geom_text(aes(y= mujeres-3.5, label = mujeres), col=&quot;white&quot;) + geom_text(aes(y= hombres+3.5, label = ifelse(año!=2013, hombres, &quot;&quot;)), col=&quot;white&quot;) + geom_text(aes(y= hombres+5.5, label = ifelse(año==2013, hombres, &quot;&quot;)), col=&quot;white&quot;) + geom_text(aes(y= total+3, label = total)) + ##escalas scale_colour_manual(name=&quot;Error Bars&quot;, values = cols) + scale_fill_manual(name=&quot;Bar&quot;, values = cols) + scale_x_continuous(breaks=c(2009:2017)) + labs(y=&quot;Cantidad de investigadores/as&quot;) Alternativa más rápida: geom_hline(aes(yintercept = promedio, col=&quot;Arancel promedio&quot;)) + scale_colour_manual(name=&quot;Error Bars&quot;, values = c(&quot;Arancel promedio&quot;=&quot;red&quot;)) + 2.6.0.2 Invertir orden de leyenda guides(fill = guide_legend(reverse = TRUE)) + 2.6.0.3 Orientación y ubicación de la leyenda Ubicación de la leyenda: theme(legend.position = c(0.85, 0.85)) Mover la leyenda en relación a su ubicación por defecto: legend.box.margin=margin(c(0,0,0,-60)) ##moverla a la izquierda Leyenda dentro del gráfico: theme(legend.position = c(.8,.8)) Eliminar leyenda: theme(legend.position = \"none\") Añadir margen al gráfico: theme(panel.spacing.x=unit(2, &quot;cm&quot;), plot.margin=unit(c(1,2,1,1), &quot;cm&quot;)) Eliminar todos los rectángulos: no_panels &lt;- theme(rect = element_blank()) Poner leyenda abajo: theme(legend.position = &quot;bottom&quot;) Cambiar orientación de los elementos de la leyenda: theme(legend.direction = &quot;horizontal&quot;) Cambiar ubicación de leyenda: + theme(legend.position = &quot;bottom&quot;, legend.box = &quot;vertical&quot;) 2.6.0.4 Textos de leyenda Cambiar título de leyenda: + scale_fill_discrete(name = &quot;&quot;) Si es una combinación de geoms: labs(fill = &quot;Nacionalidad&quot;, col = &quot;Nacionalidad&quot;) + Cambiar nombre de elementos de la leyenda: + scale_fill_discrete(name = &quot;Padrón electoral&quot;, labels = c(&quot;Inscritos que no votaron&quot;, &quot;Votantes&quot;)) + Ocultar una leyenda específica: + guides(col = FALSE) O poner dentro del geom: show.legend=FALSE 2.6.0.5 Elementos de la leyenda Cambiar espaciado horizontal de leyenda: legend.spacing.x = unit(0.4, &#39;cm&#39;) ##NO SIRVE? Cambiar espaciado vertical de elementos de leyenda: legend.text = element_text(margin = margin(t=4, b = 4), size=9)) Tamaño de cuadrados de leyenda legend.key.size = unit(1.7, &#39;lines&#39;) Ajustar espacio vertical: legend.text = element_text(margin = margin(t=10, b=10)), Ajustar espaciado de leyendas: legend.text = element_text(margin = margin(l = -2, r = 10), size=8)) Definir cantidad de filas en que aparecen las leyendas: guides(fill = guide_legend(nrow = 3)) + ##cantidad de filas de la leyenda Invertir elementos de leyenda: guides(fill = guide_legend(reverse = TRUE)) Cambiar forma de la leyenda: guides(colour = guide_legend(override.aes = list(shape = 15))) Borrar el cuadrado gris de fondo de la leyenda: theme(legend.key = element_blank()) Cambiar color de la leyenda: guides(shape = guide_legend(override.aes = list(colour = &quot;pink&quot;))) 2.6.0.6 Margen de la leyenda theme(legend.margin = margin(20, 20, 20, 0)) + ##caja de la leyenda 2.6.0.7 Leyendas redondas Cambiar una leyenda redonda de geom_line o geom_point por una cuadrada como de geom_col guides(col = guide_legend(nrow = 3, override.aes = list(shape = 15, size=7))) + Para que las barras tengan círculos en la leyenda: - poner fill y col en aes() - poner un geom_point de size 0, alpha 0 - show-legend F en las columnas - que los títulos coincidan en labs, y que se use o no reverse en guides de forma consistente: theme(legend.key = element_blank(), legend.background = element_blank()) + geom_point(size=0) + ##guides(fill = guide_legend(override.aes = list(fill = NA, text = NA, alpha = 1))) + guides(col = guide_legend(reverse = TRUE, override.aes = list(size=5, fill=NA, text=NA))) Ejemplo en gráfico de líneas ggplot(aes(fecha, valor, col=parque, fill=parque)) + geom_line(show.legend = FALSE) + geom_point(size=0, alpha=0) + scale_y_continuous(labels = function(x) format(x, big.mark = &quot;.&quot;)) + labs(y=&quot;Visitas&quot;) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, legend.title = element_blank(), axis.title.x = element_blank(), legend.text = element_text(margin = margin(t=3, b=3, r=6))) + guides(col = guide_legend(ncol=2, override.aes = list(size=4, fill=NA, text=NA))) + guides(fill = guide_legend(override.aes = list(fill = NA, text = NA, alpha = 1))) 2.7 Temas y espaciado 2.7.0.1 Espaciado entre facetas El espacio horizontal entre dos facetas de un gráfico, cuando el gráfico se separa en facetas con facet_wrap() theme(panel.spacing.x=unit(2, &quot;cm&quot;)) 2.7.0.2 Reducir margen de gráficos Especialmente útil para gráficos de torta theme(plot.margin = margin(-20, 0, -20, -0)) + Ejemplo: plot.margin = margin(20, ##arriba -90, ##derecha 10, ##abajo -50) ##izquierda ) 2.7.0.3 Múltiples gráficos Facetas ggplot(comics, aes(x = align)) + geom_bar() + facet_wrap(~ gender) ggplot(email, aes(x= number)) + geom_bar() + facet_wrap(.~spam) ## 1 - Separate rows according to transmission type, am p + facet_grid(am ~ .) ## 2 - Separate columns according to cylinders, cyl p + facet_grid(. ~ cyl) ## 3 - Separate by both columns and rows p + facet_grid(am ~ cyl) Liberar los ejes de los gráficos para que sean distintos: facer_wrap(~ country, scales=&quot;free_y&quot;) Eliminar cruces donde no hay datos: p + facet_grid(vore ~ .,scale= &quot;free_y&quot;, space = &quot;free_y&quot;) Espaciado entre facetas: library(grid) z + theme(panel.spacing.x=unit(2, &quot;cm&quot;)) Gráficos verticales facet_wrap( ~ site, ncol = 1) + ## Facet layer Espaciado entre facetas: panel.spacing.y =unit(0.4, &quot;cm&quot;)) + Ocultar títulos de faceta: theme(strip.background = element_blank(), strip.text = element_blank()) Facetas de lado facet_wrap(~ str_to_title(tipo), nrow = 2, scales = &quot;free_y&quot;, strip.position=&quot;left&quot;) Cortar textos de faceta (sin modificar los factores): facet_wrap(~egreso, nrow=1, labeller = label_wrap_gen(width=10)) + 2.7.0.4 Elementos y temas + theme() Dentro de la capa theme(): Especificar líneas: =element_line() theme( axis.line=element_line(color=&quot;red&quot;) ) Remover un elemento: =element_blank() theme( panel.grid=element_blank() ) Para especificar el eje afectado, se pone un punto y el eje al final del nombre del elemento, por ejemplo: axis.text.x 2.7.0.4.0.1 Elementos: element_text() element_rect() element_line() element_blank() Ejes: Marcas en los ejes: axis.ticks Líneas de los ejes: axis.line Etiquetas de los ejes: axis.text Fondos: panel.background Rejillas: panel.grid.major panel.grid.minor 2.7.0.4.0.2 Cambiar texto Texto de facetas: strip.text Título de los ejes: axis.title Números en los ejes: axis.text plot + theme_minimal() + ## Customize the &quot;minimal&quot; theme with another custom &quot;theme&quot; call theme( text = element_text(family = &quot;Bookman&quot;), title = element_text(color = &quot;gray25&quot;), plot.caption = element_text(color = &quot;gray30&quot;), plot.subtitle = element_text(size = 12) ) Cambiar margen del texto: theme(axis.text.y = element_text(margin = margin(r = -10)), axis.text.x = element_text(margin = margin(b = -15))) + Renombrar ejes: labs(y=&quot;Cantidad de reclamos y consultas&quot;, x=&quot;Institución o vía de emisión&quot;) 2.7.0.5 Combinar múltiples gráficos Unir dos gráficos: Si usan los mismos datos: library(gridExtra) basura_x2 &lt;- grid.arrange(basura_gg, basura_p_gg, ncol=2) Para dos gráficos distintos: ggsave(&quot;foo.pdf&quot;, arrangeGrob(plot1, plot2)) Con cowplot: library(cowplot) empresas_combinado_cowplot &lt;- plot_grid(empresas_tamaño_porc_gg, empresas_trabajadores_porc_gg, leyenda_1, nrow = 3, align = &quot;v&quot;, rel_heights = c(3, 3, 1)) 2.7.0.6 Ajustar espacio entre etiquetas de ejes y gráfico Para acercar o alejar las etiquetas de las barras: theme(axis.text.y = element_text(margin = margin(r = -3, l = 5))) + 2.7.0.7 Acercar leyenda al gráfico theme(legend.margin = margin(20, 20, 20, 0)) + ##caja de la leyenda 2.7.0.8 Cambiar tamaño y hacer zoom en los datos + coord_cartesian(xlim=c(3,6)) Graficar con la misma relación entre ejes (si las unidades de medida son iguales) + coord_equal() 2.7.0.9 Guardar y aplicar temas Guardar la configuración de elementos de la capa theme en un tema: mi_tema &lt;- theme(element.axis...) plot + mi_tema Expandir temas guardados con nuevas configuraciones: mi_tema2 &lt;- mi_tema + theme(element... Ejemplo: z + no_panels + theme(plot.background = element_rect(fill = myPink, color=&quot;black&quot;, size=3)) Elegir un tema por defecto (que se aplique a todos lo gráficos): theme_set(mi_tema) The arguments for theme_update() are the same as for theme(). When you call theme_update() and assign it to an object (e.g. called old), that object stores the current default theme, and the arguments update the default theme. If you want to restore the previous default theme, you can get it back by using theme_update() again. Let’s see how:_ ## 2 - Update the default theme, and at the same time ## assign the old theme to the object old. old &lt;- theme_update(panel.background = element_blank(), legend.key = element_blank(), legend.background = element_blank(), strip.background = element_blank(), plot.background = element_rect(fill = myPink, color = &quot;black&quot;, size = 3), panel.grid = element_blank(), axis.line = element_line(color = &quot;red&quot;), axis.ticks = element_line(color = &quot;red&quot;), strip.text = element_text(size = 16, color = myRed), axis.title.y = element_text(color = myRed, hjust = 0, face = &quot;italic&quot;), axis.title.x = element_text(color = myRed, hjust = 0, face = &quot;italic&quot;), axis.text = element_text(color = &quot;black&quot;), legend.position = &quot;none&quot;) ## 3 - Display the plot z2 - new default theme used z2 ## 4 - Restore the old default theme theme_set(old) ## Display the plot z2 - old theme restored z2 2.7.0.9.0.0.0.1 Cargar temas con el paquete ggthemes library(ggthemes) 2.8 Exportar gráficos ggsave(file=&quot;grafico7_7_2c.jpg&quot;, plot=basura_x2, dpi=&quot;retina&quot;) Cambiar DPI para especificar resolución ggsave(&quot;Gráfico.png&quot;, units=&quot;in&quot;, width=5, height=4, dpi=300) Exportar animación: anim_save(&quot;Animación.gif&quot;, animation = last_animation()) "]]
